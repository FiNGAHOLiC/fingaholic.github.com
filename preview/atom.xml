<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">

	<title>jekylog</title>
	<link href="http://fingaholic.github.com"/>
	<link type="application/atom+xml" rel="self" href="http://fingaholic.github.com/atom.xml"/>
	<updated>2012-11-28T22:35:41+09:00</updated>
	<id>http://fingaholic.github.com</id>
	<author>
		<name></name>
		<email></email>
	</author>

	
	<entry>
		<id>http://fingaholic.github.com/posts/2012-11-21-overflow.html</id>
		<link type="text/html" rel="alternate" href="http://fingaholic.github.com/posts/2012-11-21-overflow.html"/>
		<title>IE7のoverflow:hiddenのバグ</title>
		<updated>2012-11-21T00:00:00+09:00</updated>
		<author>
			<name></name>
			<uri>http://fingaholic.github.com</uri>
		</author>
		<content type="html">&lt;p&gt;親要素にoverflow:hidden;を設定しているのにIE7でなぜかposition:relative;を適用している子要素がはみ出る。&lt;/p&gt;
&lt;iframe allowfullscreen='allowfullscreen' frameborder='0' src='http://jsfiddle.net/FiNGAHOLiC/aqAw3/embedded/result,html/' style='width: 100%; height: 300px'&gt;sample&lt;/iframe&gt;
&lt;p&gt;親要素にもposition:relative;を設定するとはみ出なくなる。&lt;/p&gt;
&lt;iframe allowfullscreen='allowfullscreen' frameborder='0' src='http://jsfiddle.net/FiNGAHOLiC/jZvUb/embedded/result,html/' style='width: 100%; height: 300px'&gt;sample&lt;/iframe&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href='http://gekko-inc.co.jp/gekko_creators/2011/10/css-tips1.php' title='IEでoverflow:hiddenが効かない - GEKKO CREATORS'&gt;IEでoverflow:hiddenが効かない - GEKKO CREATORS&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='http://d.hatena.ne.jp/cyokodog-memo/20090331/1238474706' title='overflow:auto(scroll) 要素内の position:relative(absolute) 要素 注意点 - Cyokodog::Memo'&gt;overflow:auto(scroll) 要素内の position:relative(absolute) 要素 注意点 - Cyokodog::Memo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
	</entry>
	
	<entry>
		<id>http://fingaholic.github.com/posts/2012-11-21-hosts.html</id>
		<link type="text/html" rel="alternate" href="http://fingaholic.github.com/posts/2012-11-21-hosts.html"/>
		<title>Win、Macでのhostsの切替方法</title>
		<updated>2012-11-21T00:00:00+09:00</updated>
		<author>
			<name></name>
			<uri>http://fingaholic.github.com</uri>
		</author>
		<content type="html">&lt;p&gt;ローカルサーバーで作業しつつ、hosts切り替えてブラウザ確認したい場合のWinとMacの方法をメモ。&lt;br /&gt;Windowsは下記の場合面倒なんで&lt;a href='http://www.charlesproxy.com/' title='Charles Web Debugging Proxy &amp;amp;bull; HTTP Monitor / HTTP Proxy / HTTPS &amp;amp;amp; SSL Proxy / Reverse Proxy'&gt;charles&lt;/a&gt;で出来るか検証中。&lt;/p&gt;

&lt;h1 id='mac'&gt;Macの場合&lt;/h1&gt;

&lt;p&gt;Macはすごい楽。&lt;br /&gt;hosterって下記ソフト入れるだけ。GUIなんで直感的だし分かりやすい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://www.redwinder.com/macapp/hoster/' title='RedWinder::MacApp::Hoster'&gt;RedWinder::MacApp::Hoster&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;使い方は&lt;a href='http://www.redwinder.com/macapp/hoster/#usage' title='RedWinder::MacApp::Hoster'&gt;ここ&lt;/a&gt;で確認。&lt;br /&gt;新規セットで追加したいホストと関連させるIPアドレスを登録すればオンオフも一発。&lt;/p&gt;

&lt;p&gt;なおブラウザで確認する際には、割り当てているポート番号をホストに追加する。&lt;br /&gt;http://localhost:8001で確認してた場合、http://登録したホスト名:8001を叩く。&lt;/p&gt;

&lt;h1 id='windows'&gt;Windowsの場合&lt;/h1&gt;

&lt;p&gt;Windowsが面倒。&lt;br /&gt;OSによって違うかもだけどここではVista環境、ローカルサーバーがXAMPP、エディタがVimの場合のhosts切替方法。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;管理者権限でVimを起動（右クリックメニューから「管理者権限として実行」をクリック）。&lt;/li&gt;

&lt;li&gt;Windows/System32/drivers/etc/hostsを開く。&lt;/li&gt;

&lt;li&gt;登録したいIPアドレス（127.0.0.1）と関連させるホスト名を追加する。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;オフにしたい場合も上記手順を踏まないとダメなんでやたら面倒。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;追記　CharlesのDNS Spoofingで出来た。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;設定方法は下記リンクから。&lt;br /&gt;なんならMacでも出来るっぽい。&lt;br /&gt;全然使ってなかったけどCharlesあらためてゴイスー！！！&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href='http://level0.kayac.com/#!2010/08/charles.php' title='Charlesで帯域制限シュミレートとか'&gt;Charlesで帯域制限シュミレートとか&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;</content>
	</entry>
	
	<entry>
		<id>http://fingaholic.github.com/posts/2012-11-21-border.html</id>
		<link type="text/html" rel="alternate" href="http://fingaholic.github.com/posts/2012-11-21-border.html"/>
		<title>IE7のborder-style、border-widthのバグ</title>
		<updated>2012-11-21T00:00:00+09:00</updated>
		<author>
			<name></name>
			<uri>http://fingaholic.github.com</uri>
		</author>
		<content type="html">&lt;p&gt;ちょっと分かりづらいので実例を。&lt;/p&gt;
&lt;iframe allowfullscreen='allowfullscreen' frameborder='0' src='http://jsfiddle.net/FiNGAHOLiC/VFN2f/embedded/result,html/' style='width: 100%; height: 150px'&gt;sample&lt;/iframe&gt;
&lt;p&gt;border-top、border-bottomともに同じborder-widthならborder-styleが違っても普通に問題ない。&lt;br /&gt;ところがborder-topとborder-bottomの値が同一でない場合、dottedを指定したborderのドット幅がおかしくなる。&lt;/p&gt;
&lt;iframe allowfullscreen='allowfullscreen' frameborder='0' src='http://jsfiddle.net/FiNGAHOLiC/mxH3y/embedded/result,html/' style='width: 100%; height: 150px'&gt;sample&lt;/iframe&gt;
&lt;p&gt;IE系のバグは大抵hasLayoutプロパティをtrueにすれば解決するけどこれに関しては解決策はないっぽい。&lt;br /&gt;border-widthを同一にするかコンテナ作ってtop、bottomを分けるくらいしかなさそう。&lt;br /&gt;他に解決方法あれば知りたい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://css-happylife.com/archives/2007/1101_0128.php' title='IE7のborder-styleの不思議 - CSS HappyLife'&gt;IE7のborder-styleの不思議 - CSS HappyLife&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='http://blog.livedoor.jp/s_s11/archives/541266.html' title='Web design memo : IE7のborder-styleでdottedの間隔が広くなる - livedoor Blog（ブログ）'&gt;Web design memo : IE7のborder-styleでdottedの間隔が広くなる - livedoor Blog（ブログ）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
	</entry>
	
	<entry>
		<id>http://fingaholic.github.com/posts/2012-09-19-isfunction.html</id>
		<link type="text/html" rel="alternate" href="http://fingaholic.github.com/posts/2012-09-19-isfunction.html"/>
		<title>SafariでSWFの関数を$.isFunctionで判定できない</title>
		<updated>2012-09-19T00:00:00+09:00</updated>
		<author>
			<name></name>
			<uri>http://fingaholic.github.com</uri>
		</author>
		<content type="html">&lt;p&gt;下記のようにスクロールするごとにSWFの関数を叩くコードを作ってた（わかりやすくするために色々省いた）。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;流れとしては、&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;swfを指定のID（#flashcontents）に書き出す。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;書き出し完了後、swf（object要素）を変数に代入し、スクロールイベントを登録。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;swf（object要素）にonBrowserScrollが登録されており、&lt;strong&gt;尚且つ関数&lt;/strong&gt;ならばスクロールごとに実行。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;という感じで$.isFunctionで関数かどうか判定してたけどどうも&lt;strong&gt;SafariだとWin、Mac問わずfalseが返ってくる&lt;/strong&gt;。typeofで調べるとswf&lt;span&gt;&amp;#8216;onScroll&amp;#8217;&lt;/span&gt;はfunctionで返ってくるのに。&lt;/p&gt;

&lt;p&gt;とりあえず下記のように$.isFunction使わず素直にtypeofで判定だといける。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;原因を突き止めるべくjQueryの$.isFunction()関数を見てみるとreturn $.type(obj) === &amp;#8216;function&amp;#8217;しているだけだったので$.type()関数の処理を見てみた。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;どうやらcore_toString.call(obj)部分、Object.prototype.toString(obj)で&lt;span&gt;object Fucntion&lt;/span&gt;が返り値として期待される箇所で&lt;span&gt;object NPMethod&lt;/span&gt;が返ってきているのが原因っぽい。class2typeにはNPMethod型は登録されてないので&amp;#8217;object&amp;#8217;が代入され、&amp;#8217;object&amp;#8217; === &amp;#8216;function&amp;#8217;で結果的にfalseが返ってくると。&lt;/p&gt;

&lt;p&gt;ってかNPMethodって調べてもあんまり載ってないので引き続き調べてみるけどなんなんだよ一体。。。&lt;/p&gt;</content>
	</entry>
	
	<entry>
		<id>http://fingaholic.github.com/posts/2012-09-10-svg.html</id>
		<link type="text/html" rel="alternate" href="http://fingaholic.github.com/posts/2012-09-10-svg.html"/>
		<title>Data URIでSVGを指定する</title>
		<updated>2012-09-10T00:00:00+09:00</updated>
		<author>
			<name></name>
			<uri>http://fingaholic.github.com</uri>
		</author>
		<content type="html">&lt;p&gt;imgのsrcにdataURIでSVGを指定する際の手順をメモ。&lt;/p&gt;

&lt;h1 id='1_illustratorsvg'&gt;1. IllustratorでSVGを書き出す。&lt;/h1&gt;

&lt;p&gt;&lt;span&gt;別名で保存&lt;/span&gt;、若しくは&lt;span&gt;WEBおよびデバイス用に保存&lt;/span&gt;でSVGを書き出す。ロゴくらいならデフォルトの書き出しでいいかも。パスの数が膨大でファイルサイズの削減が必須な場合はカヤックさんの下記記事のようにオプションをゴニョゴニョするみたい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://design.kayac.com/topics/2011/04/svggirl.php' title='SVG女子を90%軽くしたSVG軽量化テク+α #svggirl | KAYAC DESIGNER&amp;apos;S BLOG - デザインやマークアップの話'&gt;SVG女子を90%軽くしたSVG軽量化テク+α #svggirl | KAYAC DESIGNER&amp;#8217;S BLOG - デザインやマークアップの話&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id='2_svg'&gt;2. SVGファイルを編集&lt;/h1&gt;

&lt;p&gt;100px×95pxの星を書き出したSVGファイルをテキストエディタで開くと下記みたいなXMLで構成されている。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;コメントタグとか余計なIDがあるのでこれを削除したのが下記。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;h1 id='3_xmluri'&gt;3. XMLをURIエンコードする&lt;/h1&gt;

&lt;p&gt;src属性にXMLを挿入するのでURIエンコードすると下記のようになる。&lt;br /&gt;&lt;strong&gt;encodeURI()&lt;/strong&gt;ではなく&lt;strong&gt;encodeURIComponent()&lt;/strong&gt;でエンコードする。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;h1 id='4_src'&gt;4. src属性に挿入&lt;/h1&gt;

&lt;p&gt;下記参考リンクにあるようにdataスキームであること、svg画像であることを示すために&lt;span&gt;data:image/svg+xml,&lt;/span&gt;を指定した後、エンコードしたXMLを挿入する。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://www.h2.dion.ne.jp/~defghi/svgMemo/svgMemo_02.htm' title='svg要素の基本的な使い方まとめ'&gt;svg要素の基本的な使い方まとめ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;下記実行結果。&lt;/p&gt;
&lt;iframe allowfullscreen='allowfullscreen' frameborder='0' src='http://jsfiddle.net/FiNGAHOLiC/gLybJ/embedded/result,html/' style='width: 100%; height: 200px'&gt;sample&lt;/iframe&gt;
&lt;p&gt;ちなみに注意点は旧IEやAndroid2.xではSVGは表示できないので代替えの画像パスに置換する等の作業が必要になる。&lt;/p&gt;</content>
	</entry>
	
	<entry>
		<id>http://fingaholic.github.com/posts/2012-08-09-spinejs.html</id>
		<link type="text/html" rel="alternate" href="http://fingaholic.github.com/posts/2012-08-09-spinejs.html"/>
		<title>初心者のためのSpine.js その1</title>
		<updated>2012-08-09T00:00:00+09:00</updated>
		<author>
			<name></name>
			<uri>http://fingaholic.github.com</uri>
		</author>
		<content type="html">&lt;p&gt;&lt;strong&gt;多分コードも説明もおかしいのであんま参考にしないで下さい。あくまでも初心者である自分の勉強用なので。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ステートフルJavaScriptを写経しながら何となくMVC（MVVCとかMVPとかまだなんのこっちゃ分からん）っぽい概念は分かったけどいざ自分でコード書くとなるといまいちフローが分かないので、汚コードだろうがなんだろうがとにかく自分で考えながらコード書いてみた。徐々に機能を追加、リファクタリングしていく。&lt;/p&gt;

&lt;p&gt;ちなみにどうしても自分で考えても分からなくなった時には下記ソースを見ながら進めた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://maccman.github.com/spine.todos/' title='Todos'&gt;Todos&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id='1_html'&gt;1. HTMLを用意する&lt;/h1&gt;

&lt;p&gt;JavaScriptありきのHTMLってのはないと思うのでまずは兎にも角にもHTMLを用意。これを元に作っていく。&lt;br /&gt;最新の&lt;a href='https://raw.github.com/maccman/spine/master/lib/spine.js' title='Spine.js'&gt;Spine.js&lt;/a&gt;も読み込んでおく。 また、jQueryも最新版を使用する。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;h1 id='2_'&gt;2. モデルを用意する&lt;/h1&gt;

&lt;p&gt;ローカルストレージを使用してデータを永続化して使用する前提なので&lt;a href='https://raw.github.com/maccman/spine/master/lib/local.js' title='local.js'&gt;local.js&lt;/a&gt;を読み込む。&lt;br /&gt;ここにユーザーが入力したデータを内部的にもローカルストレージにも保存する。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://spinejs.com/api/models' title='Models API - API - Spine'&gt;Models API - API - Spine&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id='3_'&gt;3. モデルをハンドリングするコントローラを用意する&lt;/h1&gt;

&lt;p&gt;ユーザーのデータをモデルに追加したりモデルに変化があった場合にビューに反映したりするコントローラを用意する。名前はモデルの名前を複数形にするのが通例っぽいのでTasksにした。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://spinejs.com/api/controllers' title='Controllers - API - Spine'&gt;Controllers - API - Spine&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id='4_'&gt;4. アプリ全体をハンドリングする？コントローラを起動する&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;ビューごとにコントローラを1つずつ用意するというのが、よく使われているパターンです。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;と、ステートフルJavaScriptにあるのでTasksコントローラが個々のタスクのビューを管理するものならば、Appコントローラ（名前はTaskAppとかのほうがよかったかも）は全体のビューを管理するものって考えで良いのだろうか？ちょっとこの辺りまだモヤモヤしてる。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://spinejs.com/api/controllers' title='Controllers - API - Spine'&gt;Controllers - API - Spine&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id='5_domapp'&gt;5. DOM構築後にAppコントローラをインスタンス化&lt;/h1&gt;

&lt;p&gt;コントローラはDOM要素を利用するのでDOM構築後にインスタンス化。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;h1 id='6_appel'&gt;6. Appコントローラのインスタンス化時にel要素を渡す&lt;/h1&gt;

&lt;p&gt;どのDOM要素をコントローラで管理？するか示すためel要素を指定。&lt;br /&gt;ちなみにnewするとinitが叩かれるので初期化処理はAppコントローラのinitに記述する。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;h1 id='7_'&gt;7. イベントの委譲&lt;/h1&gt;

&lt;p&gt;テキストフィールドに文字が入力されており（空の場合はreturn）、createボタンが押下されればcreateメソッドを叩く。&lt;br /&gt;ちなみにプロパティとしてアクセス出来るようにelementsにinputを設定しておく。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;h1 id='8_'&gt;8. 新規モデルを作成&lt;/h1&gt;

&lt;p&gt;createボタンが押されればモデルに新規レコードを作成して欲しいのでcreateメソッド内で新規レコードを作成。&lt;br /&gt;また、作成時にtaskプロパティにテキストフィールドの値を渡す。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;h1 id='9_'&gt;9. バインディング&lt;/h1&gt;

&lt;p&gt;レコードが作成（create）されればcreateイベントが発行されるのでその際の処理（ビューをレンダリング）をインスタンス化時にモデルに対して登録しておく。&lt;br /&gt;ちなみにモデル（Task）からメソッドを叩くのでコンテキストを制御するためにproxy関数を利用して叩く。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;h1 id='10_tasks'&gt;10. Tasksコントローラの生成&lt;/h1&gt;

&lt;p&gt;レコードを元にビューを作ってレンダリングするためにレコードを渡しつつTasksコントローラを作成する。&lt;br /&gt;また、書き出し先をプロパティとして使用したいのでelementsに設定しておく。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;h1 id='11_'&gt;11. レンダリング&lt;/h1&gt;

&lt;p&gt;el要素はインスタンス化時に何も渡さなければ空のdiv要素が生成されるがここではliタグを生成して欲しいので、tagプロパティにliを設定。renderメソッドではインスタンス化時に設定したレコード（item）とテンプレートを利用してHTMLを生成、el要素に追加する。&lt;br /&gt;また、メソッドチェーン用に自身をreturnしておく。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;h1 id='12_html'&gt;12. テンプレート用のHTMLを用意する&lt;/h1&gt;

&lt;p&gt;テンプレートは&lt;a href='https://raw.github.com/jquery/jquery-tmpl/master/jquery.tmpl.min.js' title='jQuery.tmpl'&gt;jQuery.tmpl&lt;/a&gt;を使用。わすれずに読み込んでおくこと。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;h1 id='13_1'&gt;13. 訪問時の挙動1&lt;/h1&gt;

&lt;p&gt;とりあえず入力データを保存するところまでは実装できたけどこのままじゃ訪問時に何も表示されないので、Appコントローラ初期化時にモデルのクラスメソッドであるfetchメソッドを使用して訪問時にローカルストレージからデータを取得する処理を実装する。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;h1 id='14_2'&gt;14. 訪問時の挙動2&lt;/h1&gt;

&lt;p&gt;データを読み込んだだけでは何も処理されないので、fetch後に発行されるrefreshイベントを監視し、モデルのクラスメソッドであるeachメソッドを利用して全レコードを書き出す処理を実装する。&lt;br /&gt;ちなみにモデル（Task）からメソッドを叩くのでコンテキストを制御するためにproxy関数を利用して叩く。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;ここまでの実装例は下記。&lt;/p&gt;
&lt;iframe allowfullscreen='allowfullscreen' frameborder='0' src='http://jsfiddle.net/FiNGAHOLiC/2BpES/embedded/' style='width: 100%; height: 450px'&gt;sample&lt;/iframe&gt;
&lt;p&gt;次回は今回のソースを元に削除ボタンを追加してみる。&lt;/p&gt;</content>
	</entry>
	
	<entry>
		<id>http://fingaholic.github.com/posts/2012-08-08-escape-liquid-template-tags.html</id>
		<link type="text/html" rel="alternate" href="http://fingaholic.github.com/posts/2012-08-08-escape-liquid-template-tags.html"/>
		<title>Jekyllでliquidテンプレートタグをエスケープする</title>
		<updated>2012-08-08T00:00:00+09:00</updated>
		<author>
			<name></name>
			<uri>http://fingaholic.github.com</uri>
		</author>
		<content type="html">&lt;p&gt;どうもマークダウン内でif文書くとliquidテンプレートタグと解釈されるっぽい。&lt;/p&gt;

&lt;p&gt;下記は何も表示されないけど、&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;こっちだと表示される。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;解決法はググると載ってた。&lt;/p&gt;

&lt;p&gt;&lt;a href='http://stackoverflow.com/questions/3426182/how-to-escape-liquid-template-tags' title='How to escape liquid template tags? - Stack Overflow'&gt;How to escape liquid template tags? - Stack Overflow&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;{の前に{{&amp;#34;を加え、ステートメントである単語の後ろに&amp;#34;}}を加える&lt;/strong&gt;って感じらしい。&lt;/p&gt;

&lt;p&gt;なんというややこしさ。多分すぐ忘れる。&lt;/p&gt;

&lt;p&gt;これが煩わしい場合はプラグインもあるみたい。&lt;/p&gt;

&lt;p&gt;&lt;a href='https://gist.github.com/1020852' title='Raw tag for jekyll. &amp;amp;mdash; Gist'&gt;Raw tag for jekyll. &amp;#8212; Gist&lt;/a&gt;&lt;/p&gt;</content>
	</entry>
	
	<entry>
		<id>http://fingaholic.github.com/posts/2012-08-07-stateful-javascript.html</id>
		<link type="text/html" rel="alternate" href="http://fingaholic.github.com/posts/2012-08-07-stateful-javascript.html"/>
		<title>ステートフルJavaScript 11章 その2</title>
		<updated>2012-08-07T00:00:00+09:00</updated>
		<author>
			<name></name>
			<uri>http://fingaholic.github.com</uri>
		</author>
		<content type="html">&lt;h1 id='116_'&gt;11.6 連絡先管理アプリケーションの作成&lt;/h1&gt;

&lt;p&gt;いよいよ実践編。ソースコードは下記からダウンロード可能。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='https://github.com/maccman/book-assets/tree/master/ch11/spine.contacts' title='book-assets/ch11/spine.contacts at master ・ maccman/book-assets'&gt;book-assets/ch11/spine.contacts at master ・ maccman/book-assets&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;また、コードは違うけどデモは下記から確認出来る。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://spine-contacts.herokuapp.com' title='App'&gt;App&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Githubのサンプルコードは1年以上前のもので、2012年8月7日時点で&lt;a href='http://spinjs.com/' title='最新版のSpine.js'&gt;最新版のSpine.js&lt;/a&gt;の記法と違ってるので注意。あくまでもモデルやコントローラの連携部分を確認する程度に留めておいたほうがよさげ。また、本の中の解説とサンプルコードだと機能に少し違いがあり、ユーティリティ関数も混在してて見通しが悪かったのでMVC部分を重点に確認できるようにサンプルコードから関数を削ったり機能を省いたりしたりしてる。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;関係なくなった機能部分については引用を省いてHTMLは下記のように変更した。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;h2 id='1161_contact'&gt;11.6.1 Contactモデル&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;連絡先を表すContactモデルは正味5、6行程度のコードで定義されており、とてもシンプルです。ここにはfirst_name、last_name、emailという3つの属性が用意されています。テンプレートからの呼び出しを想定し、連絡先のフルネームを返すヘルパ関数も定義します。コードは以下のようになります。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ここではSpine.Model.Localがモデルに追加されています。これによってレコードがブラウザのローカルストレージに保存され、後で再びこのアプリケーションにアクセスしたときにも同じ連絡先を利用できます。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;ちなみにspine.model.local.jsも古いので最新版のspine.model.local.jsで作業する場合は使用方法については特別変更ないが念のため注意すること。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id='1162_sidebar'&gt;11.6.2 Sidebarコントローラ&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;このコントローラは、連絡先の一覧表示と現在選択されている項目の管理に責任を持ちます。連絡先が変更されると、コントローラは表示を更新して変更内容を反映させます。また、サイドバーには[新規連絡先]ボタンが表示され、コントローラはそのclickイベントを監視します。イベントが発生すると、空の連絡先が新規に作成されます。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;コントローラのinit()関数の中で、見慣れないSpine.Listというクラスが利用されています。これはユーティリティのコントローラであり、レコードの一覧を作成するのに適しています。しかもSpine.Listには現在選択されている項目を管理する機能も用意されています。ユーザーが別の項目を選択すると、changeイベントが発生してイベントリスナに通知されます。&lt;br /&gt;ここでは、連絡先が作成あるいは変更されるとリスト全体が再描画されます。これによってコードはシンプルになりますが、処理速度が遅いと感じられたら修正が必要になるでしょう。&lt;br /&gt;template()の中で参照されている#contactsTemplateは以下のようなscript要素です。ここには、リスト中の個々の連絡先のためのテンプレートが記述されています。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;ちなみにspine.list.jsも古いので最新版のspine.list.jsで作業する場合は注意すること。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Spine.Listはこのテンプレートを使ってそれぞれの連絡先を描画し、現在選択されている項目のli要素にはcurrentというクラスを追加しています。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id='1163_contacts'&gt;11.6.3 Contactsコントローラ&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Sidebarコントローラが連絡先の一覧を表示しつつ選択対象の項目を管理する一方、Contactsコントローラは選択されている連絡先の内容を表示します。コードは以下のとおりです。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;サイドバーでいずれかの連絡先が選択されると、グローバルなshow:contactイベントが発生します。Contactsコントローラはこのイベントを監視し、イベントの発生時には選択された連絡先のオブジェクトを渡してshow()関数を呼び出します。そしてshowContentが指すdiv要素を再描画し、選択された連絡先の情報で表示を置き換えます。&lt;br /&gt;このコードでは#contactTemplateというテンプレートが参照されています。これはContactsの中で選択されている連絡先の内容を表示するために使われます。テンプレートは以下のようになります。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;これで連絡先の情報を表示できるようになりましたが、編集や破棄はまだできません。そこで、Contactsコントローラを少し手直しします。.optEditと.optSaveの各要素がクリックされたときに表示モードと編集モードとの間で切り替えを行うというのが主な変更点です。また、#editContactTemplateというテンプレートを追加します。レコードを保存する際に、編集モードのフォームのinput要素を調べてレコードの属性を更新します。新しいコードは以下のようになります。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ここで使われている#editContactTemplateのテンプレートは以下のようになります。このテンプレートもページ内に記述する必要があります。#editContactTemplateと#contactTemplateは本質的によく似ており、異なるのは#editContactTemplateがinput要素を使ってレコードを表示しているという点だけです。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;h2 id='1164_app'&gt;11.6.4 Appコントローラ&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;SidebarとContactsの各コントローラによって、Contactレコードの表示や選択あるいは編集などが可能になりました。後は、これらのコントローラをインスタンス化するためのAppコントローラだけです。インスタンス化の際に、それぞれのコントローラが必要としている要素を渡します。コードは以下のとおりです。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;下記が実装例。&lt;/p&gt;
&lt;iframe allowfullscreen='allowfullscreen' frameborder='0' src='http://jsfiddle.net/FiNGAHOLiC/qSrJg/embedded/' style='width: 100%; height: 450px'&gt;sample&lt;/iframe&gt;</content>
	</entry>
	
	<entry>
		<id>http://fingaholic.github.com/posts/2012-08-01-stateful-javascript.html</id>
		<link type="text/html" rel="alternate" href="http://fingaholic.github.com/posts/2012-08-01-stateful-javascript.html"/>
		<title>ステートフルJavaScript 11章 その1</title>
		<updated>2012-08-01T00:00:00+09:00</updated>
		<author>
			<name></name>
			<uri>http://fingaholic.github.com</uri>
		</author>
		<content type="html">&lt;p&gt;まずはSpineの概要と使用方法。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Githubのサンプルコードは1年以上前のもので、2012年8月7日時点で&lt;a href='http://spinjs.com/' title='最新版のSpine.js'&gt;最新版のSpine.js&lt;/a&gt;の記法と違ってるので注意。あくまでもモデルやコントローラの連携部分を確認する程度に留めておいたほうがよさげ。&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Spine（&lt;a href='http://spinjs.com/' title='http://spinjs.com/'&gt;http://spinjs.com/&lt;/a&gt;）はJavaScriptアプリケーション開発のための軽量なライブラリであり、本書で紹介した概念の多く（MVC、イベント、クラス）を実際に活用しています。本当に軽量であり、最小化と圧縮を経た500行程度のライブラリはわずか2キロバイトほどです。しかし軽量だからといって機能が乏しいわけではなく、クリーンで疎結合なコードによって高機能なJavaScriptアプリケーションを作成できます。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;著者であるmaccman（Alex MacCaw）氏が開発したMVCフレームワーク。IE6、IE7のようなネイティブでJSONをサポートしていない古いブラウザでも動作させる場合にはクロックフォード御大謹製の&lt;a href='https://github.com/douglascrockford/JSON-js/' title='JSON2ライブラリ'&gt;JSON2ライブラリ&lt;/a&gt;が必要。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Spineはデータをユーザー向けに表示するための方法については何も規定していません。Spineでの力点は柔軟さとシンプルさの実現にあります。Spineは骨組みの部分だけを提供し、アプリケーションロジックの実現という開発者にとっての楽しみには干渉しません。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;骨組みの部分、まさにBackboneを担うライブラリ。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Spineには継承をサポートしたクラスライブラリ（Spine.Class）、イベントモジュール（Spine.Events）、ORM（Spine.Model）、そしてコントローラ（Spine.Controller）が含まれています。その他必要なライブラリ（テンプレートやDOM操作など）については使い慣れたものを利用できます。ただし、jQueryとZepto.jsについてはこれらを保管する機能を用意しています。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Zepto.jsはjQueryライクに使用出来るわずか軽量のJavaScriptライブラリ。その軽さからモバイル向けに力を発揮するみたいだけどもちろんPC向けにも使用出来る。モダンブラウザ向けのライブラリなのでIE全般には対応しておらず、使用する際には注意する必要がある。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://zeptojs.com/' title='Zepto.js: the aerogel-weight jQuery-compatible JavaScript library'&gt;Zepto.js: the aerogel-weight jQuery-compatible JavaScript library&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id='111_'&gt;11.1 セットアップ&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Spineの機能はすべてSpineという名前空間の中に存在するため、他の変数と競合することはありません。したがって、jQueryやZepto.jsあるいはPrototypeなどのライブラリがインクルードされていても問題は発生しないはずです。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href='/posts/2012-07-17-stateful-javascript.html' title='3章'&gt;3章&lt;/a&gt;で述べられてたやつも当然盛り込んでますよと。&lt;/p&gt;

&lt;h1 id='112_'&gt;11.2 クラス&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;新しいクラスを定義するには、Spine.Class.create(instanceProperties, classProperties)を呼び出します。各プロパティは省略可能です。呼び出し例を示します。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;まずは親クラスUserを作成。ちなみに初期化時にnameプロパティを設定。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;子クラスFriendを作成するには再度create関数で。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;親クラスのプロパティも継承されてる。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;h2 id='1121_'&gt;11.2.1 インスタンス化&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;コンストラクタ関数の代わりに純粋なプロトタイプオブジェクトと継承が使われているため、Spineではインスタンスの生成にnew演算子は利用できません。代わりに以下のようなinit()関数が用意されています。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;inti()で指定した引数はすべて、クラスが持つ初期化のための関数init()に渡されます。コードは以下のようになります。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;h2 id='1122_'&gt;11.2.2 クラスの拡張&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;クラスプロパティとインスタンスプロパティを追加できるのはクラスの定義時だけではなく、それぞれinclude()とextend()を使ってもプロパティの追加が可能です。これらの関数にはプロパティをオブジェクトリテラルとして渡します。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;この辺りも&lt;a href='/posts/2012-06-27-stateful-javascript.html' title='1章'&gt;1章&lt;/a&gt;、&lt;a href='/posts/2012-07-17-stateful-javascript.html' title='3章'&gt;3章&lt;/a&gt;あたりを読んでいると実装方法に違いがないのが分かる。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;include()とextend()によって、複数箇所で最利用可能なモジュールを実現できるようになります。利用例は以下のようになります。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;include()やextend()が呼び出された際のコールバックを定義することもできます。このコードでは、User.extend()が呼び出された際にUserというコンテキストのもとでextended()コールバックが呼び出されます。同様に、モジュールにincludedという定義がされていれば、include()が呼び出された際にこのプロパティがコールバック関数として呼び出されます。&lt;br /&gt;継承はプロトタイプに基づいているため、クラスに対して追加されたプロパティは子クラスへも動的に反映されます。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;子クラスで上書きされたプロパティは、親クラスに影響を及ぼしません。しかし、子クラスが持つオブジェクト（配列など）を変更すると、その変更は継承関係を持つクラス全体に影響します。特定のクラスあるいはインスタンスに固有のオブジェクトを定義するには、クラスあるいはインスタンスが最初に初期化される際に定義を行う必要があります。このために用意された関数がcreated()であり、下記のように利用します。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;h2 id='1123_'&gt;11.2.3 コンテキスト&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;コンテキストの変更はjavaScriptのプログラムの中で頻繁に行われており、Spine.Classでもコンテキストすなわち有効範囲の制御のためのユーティリティ関数をいくつか用意しています。まずは例として、正しく機能しないコードを紹介します。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;このコードでは、イベントが発生すると（Controllerではなく）#destroyという要素をコンテキストとしてdestroy()関数が呼び出されてしまいます。この問題に対処するには、コンテキストの中継を行い期待するコンテキストへと置き換える必要があります。Spineではこのためにproxy()関数が用意されています。利用例は以下のとおりです。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;これまた&lt;a href='/posts/2012-06-27-stateful-javascript.html' title='1章'&gt;1章&lt;/a&gt;、&lt;a href='2012-07-20-stateful-javascript.html' title='4章'&gt;4章&lt;/a&gt;と同様の実装。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;コンテキストの中継を何度も記述するのは面倒に思われるかも知れません。このような場合は、以下のようにproxyAll()関数を利用できます。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;proxyAll()には複数の関数の名前を配列として指定します。proxyAll()が実行されると、指定されている関数が書き換えられ、適切なコンテキストのもとで処理が行われるようになります。この例では、destroy()とrender()がローカルなコンテキストのもとで実行されるようになります。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;この辺りの処理は後々解説するMVCフレームワーク、Backbone.jsとほぼほぼ違いはない。&lt;/p&gt;

&lt;h1 id='113_'&gt;11.3 イベント&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;イベントはSpineにとって非常に重要であり、内部的にも多用されています。Spineでのイベント関連機能はSpine.Eventsモジュールに含まれています。このモジュールはどこでも利用でき、例えば以下のようにSpineのクラスにもイベントの機能を追加できます。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Spine.Eventsにはイベント処理のための関数が3つ用意されています。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;bind(eventName, callback)&lt;/li&gt;

&lt;li&gt;trigger(eventName, [*data])&lt;/li&gt;

&lt;li&gt;unbind(eventName, [callback])&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;jQueryのイベントAPIを使ったことがあるなら、これらの関数に違和感を覚えることはないはずです。Userクラスに対してイベントの関連付けを行い、そしてイベントを発生させてみましょう。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;複数のイベントを1つのコールバックで処理したい場合は、以下のようにイベント名を空白で区切って指定します。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;trigger()には、イベント名とコールバックに渡される引数（省略可能）を指定します。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Spineのイベントが最も使われるのはデータバインディング関連の処理です。ここではアプリケーションのモデルとビューが協調して動作します。これについては「11.6 連絡先管理アプリケーションの作成」で詳しく開設します。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id='114_'&gt;11.4 モデル&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Spineのソースコードを見ると、その大部分がモデル関連の記述に費やされていることがわかります。モデルはMVCアプリケーションで中心的な役割を果たし、データの操作や保管を受け持ちます。Spineには完全な機能を持ったORMが用意されており、これらの作業を簡素化してくれます。&lt;br /&gt;create()という関数はすでに使われているため、新しいモデルの作成にはSpine.Model.setup(name, attrs)という関数を使います。ここにはモデルの名前と、属性名の配列を引数として渡します。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;インスタンスプロパティやクラスプロパティを追加するには、それぞれ以下のようにinclude()とextend()を利用します。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;レコードをインスタンス化するには、プロパティの初期値を表すオブジェクトを指定してinit()関数を呼び出します。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;属性値の読み書きは通常のオブジェクトのプロパティと同様に行えます。また、attributes()関数はレコードが持つ属性をすべてオブジェクトリテラルとして返します。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;レコードの保管には、それが新規であっても既存のものであってもsave()関数を利用します。レコードを新規保管する際にはID値が生成されます。保管されたレコードはローカルのメモリ上に保持されます。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;レコードを取得するにはモデルのfind()関数を利用します。以下のように、引数としてレコードのIDを指定します。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;指定されたIDに対応するレコードが存在しない場合、例外が発生します。exists()関数を使えば、レコードが存在するかどうかを調べることができます。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;destroy()関数はローカルに存在するレコードを削除します。コードは以下のとおりです。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;h2 id='1141_'&gt;11.4.1 レコードの検索&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;ID以外にもレコードの検索を行う手段が用意されています。一般的に、すべてのレコードを取り出したり、指定された条件に適合するレコードだけを取り出したりするという操作がよく行われます。Spineではこれらのためにall()、select()、each()という関数が用意されています。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;また、属性の値に基づいてレコードを取得するためのヘルパ関数もいくつか存在します。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;h2 id='1142_'&gt;11.4.2 モデルのイベント&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;モデルのイベントに対してコールバックを関連づけ、レコードが変更された際に呼び出されるようにできます。コードは以下のようになります。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;レコードに変化が生じると、そのレコードがコールバックに渡されます。モデルに対してイベントリスナを設定すると、どのレコードへの変更についてもリスナが呼び出されます。以下のように、特定のレコードに対してのみリスナを設定することもできます。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;イベントには以下のような種類があります。trigger()を使えば独自のイベントを定義することもできます。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;dl&gt;
&lt;dt&gt;save&lt;/dt&gt;

&lt;dd&gt;レコードが保管（新規作成または更新）されると発生&lt;/dd&gt;

&lt;dt&gt;update&lt;/dt&gt;

&lt;dd&gt;レコードが更新されると発生&lt;/dd&gt;

&lt;dt&gt;create&lt;/dt&gt;

&lt;dd&gt;レコードが新規作成されると発生&lt;/dd&gt;

&lt;dt&gt;destroy&lt;/dt&gt;

&lt;dd&gt;レコードが破棄されると発生&lt;/dd&gt;

&lt;dt&gt;change&lt;/dt&gt;

&lt;dd&gt;以上のいずれかの操作で発生&lt;/dd&gt;

&lt;dt&gt;refresh&lt;/dt&gt;

&lt;dd&gt;すべてのレコードが無効化され置き換えられると発生&lt;/dd&gt;

&lt;dt&gt;error&lt;/dt&gt;

&lt;dd&gt;データの検証に失敗すると発生&lt;/dd&gt;
&lt;/dl&gt;

&lt;blockquote&gt;
&lt;p&gt;モデルのイベントはアプリケーションに不可欠です。モデルとビューを組み合わせる際には特に重要です。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id='1143_'&gt;11.4.3 データの検証&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;データの検証（バリデーション）は、モデルインスタンスのvalidate()関数を上書きするという極めてシンプルな形で実現されています。レコードが保管される際には必ずvalidate()が呼び出されます。この関数から何か値が返されたら、検証は失敗したということを意味します。何も返されなかった場合は処理が続行され、レコードは正しく保管されます。validate()の例を紹介します。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;検証に失敗した場合、失敗の理由を表す文字列が返されます。この文字列を使い、エラーの内容や修正方法についてユーザーに知らせることができます。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;検証に失敗するとモデルのerrorイベントも発生します。コールバックにはレコードとエラーメッセージが渡されます。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id='1144_'&gt;11.4.4 永続化&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Spineでのレコードは常にメモリ上に保持されますが、HTML5のローカルストレージやAjaxリクエストなどをバックエンドとして選択することもできます。&lt;br /&gt;ローカルストレージは非常に簡単に利用できます。spine.model.local.jsというJavaScriptファイルをインクルードし、以下のようにしてSpine.Model.Localモジュールをモデルに追加します。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ブラウザのローカルストレージからレコードを自動的に取り出すことはできず、fetch()関数を使って既存のデータを一括して取り出すことになります。この処理はアプリケーションの初期化処理がモデル以外についてすべて完了してから呼ばれることが多いでしょう。モデルに新しいデータがセットされるとrefetchが発生します。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Ajaxを使った永続化も同様に行えます。spine.mode.ajax.jsをインクルードし、Spine.Model.Ajaxモジュールをモデルに追加します。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;デフォルトでは、モデル名を複数形にしたものを元にしてURLが決定されます。したがって、この例ではTaskモデルのURLは/tasksになります。このデフォルトの設定を変更するには、クラスのURLプロパティを以下のように上書きします。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Task.fetch()が呼び出されると、SpineによってGET形式のAjaxリクエストが/tasksに対して送信されます。ここではすべてのTaskオブジェクトを配列として含むJSON形式のレスポンスが想定されています。サーバが正当なレスポンスを返すとレコードが読み込まれ、refreshイベントが発生します。&lt;br /&gt;レコードの生成や更新あるいは破棄のたびにAjaxリクエストがサーバーに送信され、サーバとクライアントの間でデータの同期が保たれるようにしています。この際、サーバ側ではRESTに従ったリクエストを受付可能でなければなりません。これによって他種のクライアントからもシームレスなアクセスが可能になりますが、もちろん独自のリクエストを受け付けるようなカスタマイズをすることもできます。デフォルトでは以下のようなエンドポイントが想定されています。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;クライアント側でのレコードが作成されると、POST形式のリクエストが送信されます。このリクエストにはレコードのJSON表現が含まれます。「卵を買う」というTaskインスタンスが作成されたとすると、以下のようなリクエストが発生することになります。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;同様に、レコードを破棄するとDELETE形式のリクエストが送信され、レコードを更新するとPUT形式のリクエスト（以下のコードを参照）が送信されます。PUTとDELETEについては、レコードのIDがURLの中で指定されます。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;SpineではAjaxを使った同期について、他の多くのライブラリとは異なる方式で処理を行なっています。クライアント側にレコードが保管された後でリクエストが送信されるため、クライアントがレスポンスを待つことはありません。これによってクライアントとサーバを完全に疎結合の状態に保つことができ、たとえサーバーが利用できなくても処理を続行できます。 サーバとの疎結合の関係には3つの大きなメリットがあります。まず、ユーザーにとってインターフェースが高速でしかも停止せず、処理の完了を待つ必要がなくなります。また、コードをシンプルなものにできます。例えばサーバからのレスポンスを待つ間レコードを編集不可の状態にするといった処理の必要はありません。さらに、必要ならオフライン状態での操作にも対応できるようになります。&lt;br /&gt;サーバ側でデータの検証を行うのかと疑問に思った読者がいるかもしれません。Spineでは、検証はすべてクライアント側で行うと想定しています。サーバからエラーが返されるのは、サーバー側のプログラム自体に何らかの問題があるという特殊な場合に限られます。&lt;br /&gt;サーバがエラーのレスポンスを返した場合、モデル上でajaxErrorイベントが発生します。イベントハンドラには、レコード、XMLHttpRequestオブジェクト、Ajaxの設定、エラーを表すオブジェクトが渡されます。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;h1 id='115_'&gt;11.5 コントローラ&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;最後に紹介するコンポーネントがコントローラです。コントローラはアプリケーション全体を結びつける役割を果たします。一般的に、コントローラはDOMにイベントハンドラを追加し、テンプレートの描画を行い、そしてビューとモデルの同期を保ってくれます。コントローラを作成するには、以下のようにcreate()を呼び出すことによってSpine.Controllerの子クラスを定義します。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ページの状態変化の影響を受けないようにするために、コントローラはページ上の他の部分よりも後で読み込むのがよいでしょう。Spineを使ったサンプルコードでは、jQuery()への呼び出しの内部でコントローラが定義されています。こうすることによって、ドキュメントの準備ができてからコントローラが作成されることになります。&lt;br /&gt;Spineでのコントローラの名前は、関連するモデルの名前を複数形にして先頭を大文字にしたものというルールを定めます。ほとんどのコントローラはインスタンスプロパティだけを持ちます。これらはもっぱらインスタンス化の後で使われるためです。他のクラスト同様に、コントローラも以下のようにinit()関数を呼び出すことによってインスタンス化できます。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;コントローラにはDOMの要素が関連づけられており、elプロパティを通じてアクセスできます。以下のようにしてインスタンス化時に要素を指定することもできますが、デフォルトではdiv要素が自動生成されます。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;この要素は、テンプレートの追加やビューの描画の際に内部的に使われます。以下に例用例を示します。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;また、init()関数に渡された引数はすべてコントローラのプロパティとしてセットされます。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;h2 id='1151_'&gt;11.5.1 プロキシ&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;「11.2.3 コンテキスト」で、イベントのコールバックをthis.proxy()でラップすることによってコールバックを適切なコンテキストのもとで実行するというコード例を紹介しました。これは非常に多用されるパターンであり、Spineではproxiedというショートカットを用意しています。コントローラのコンテキストで実行したい関数の名前を配列として記述し、proxiedプロパティにセットします。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;こうすると、指定された関数は常に適切なコンテキストで実行されるようになります。コンテキストについて心配することなしに、render()などのコールバックをイベントハンドラとして設定できます。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id='1152_'&gt;11.5.2 要素&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;コントローラ配下の要素に、ローカルなプロパティとしてアクセスできると便利なことがあります。Spineではこのためのショートカットとしてelementsが用意されています。セレクタとプロパティ名との関係を指定したオブジェクトを、コントローラのelementsプロパティにセットします。以下の例では、セレクタform input&lt;span&gt;type=text&lt;/span&gt;にマッチする要素がthis.inputという変数として扱えるようになります。セレクタの評価はコントローラの要素elを基準として行われ、ページ全体が対象になるわけではない点に注意が必要です。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;コントローラのelが持つHTMLを置き換えた場合、要素への参照を更新するためにrefreshElements()を呼び出す必要があります。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id='1153_'&gt;11.5.3 イベントの委譲&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;eventsプロパティを使うと、イベントリスナを一括して追加でき便利です。Spineの内部ではイベントのバブリング（「2.2 イベントの発生順序」参照）が行われており、コントローラの要素elに1つだけイベントリスナが設定されています。eventsプロパティと同様に、すべてのイベントの委譲も有効範囲はel内です。&lt;br /&gt;eventsプロパティで指定するイベントハンドラは&lt;strong&gt;&amp;#34;eventName selector&amp;#34;: &amp;#34;callback&amp;#34;&lt;/strong&gt;の形式で記述します。selectorは省略可能であり、省略されている場合はelに直接登録されます。省略されていない場合はイベント処理が委譲（&lt;a href='http://api.jquery.com/delegate/' title='http://api.jquery.com/delegate/'&gt;http://api.jquery.com/delegate/&lt;/a&gt;参照）され、セレクタにマッチする子要素でイベントが発生した場合にイベントハンドラが呼び出されるようになります。この処理は動的に行われるため、elのコンテンツが変更されても正しく処理されます。利用例を以下に示します。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;この例では、セレクタにマッチするinput要素でkeydownイベントが発生したときにコントローラのコールバックkeydown()が呼び出されます。コールバックは適切なコンテキストのもとで呼び出されることがSpineによって保証されているため、ここではプロキシ関数を利用する必要はありません。&lt;br /&gt;コールバックにはeventオブジェクトが渡されます。この例ではこのオブジェクトから、どのキーが押されたかなどの情報が取り出されることになります。イベントの発生元の要素はeventのtargetプロパティにセットされています。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id='1154_'&gt;11.5.4 コントローラのイベント&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;イベントの委譲に加え、コントローラはカスタムイベントにも対応しています。デフォルトでコントローラはSpine.Eventsをextend()しているため、bind()やtrigger()といったイベント関連の関数も利用できます。この仕組によってコントローラ間の独立性を保ったり、コントローラの内部構造としてこの仕組みを活用したりできます。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;この例では別のコントローラからSidebarのchangeイベントに関連付けを行なっており、イベントを発生させることも可能です。2章でも紹介しましたが、カスタムイベントはアプリケーションの内部構造を定義する際に非常に有用であり、たとえ外部でイベントがまったく使われないとしてもその有用性は変わりません。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id='1155_'&gt;11.5.5 グローバルなイベント&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Spineではグローバルにイベントへの関連づけを行ったり、イベントを発生させたりできます。これは一種のパブリッシュ／サブスクライブであり、複数のコントローラが互いについて知らない場合でもコミュニケーションを行えるようになります。同時にコントローラ間の疎結合の関係も保たれます。これはグローバルなオブジェクトSpine.Appを通じて実現されます。どんなオブジェクトもこのSpine.Appに対してイベントの関連付けや発生を行えます。以下のようにして使います。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;SpineのコントローラによってSpine.Appにthis.Appという別名が与えられており、タイピングの量を少しだけ削減できます。このコードでは、Sidebarコントローラがchangeというグローバルなイベントに関連付けを行なっています。他のコントローラやスクリプトが以下のようにしてこのイベントを発生させ、必要なデータを渡すことが可能です。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;h2 id='1156_render'&gt;11.5.6 Renderパターン&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;コントローラで利用可能なオブションの主なものについてここまで紹介してきたので、ここでは一般的な利用例について見てみましょう。&lt;br /&gt;モデルとビューを関連づける上でRenderパターンはとても有効です。コントローラがインスタンス化される際に、関連するモデルに対してイベントリスナを設定します。このイベントリスナはモデルが再読み込みあるいは変更された場合にコールバックとして呼び出されます。そしてイベントリスナは要素elを更新します。多くの場合、テンプレートによって描画された内容を元にelのコンテンツが置き換えられます。以上の処理を記述したのが以下のコードです。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;この方法はシンプルですがやや乱暴であり、レコードが1つでも変更されると表示全体が更新されてしまいます。単純な短いリストについてはこの方法でも十分ですが、個々の要素に対してより詳細な制御を行いたい場合もあります。例えばそれぞれの項目にイベントハンドラを設定したい場合などですが、このようなときに活用できるのがElementパターンです。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id='1157_element'&gt;11.5.7 Elementパターン&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Elementパターンの機能は基本的にはRenderパターンと同一ですが、より細かな処理が可能です。ここではコントローラが2つ使われます。1つは項目の集合を管理し、もう1つは個々の項目を扱います。以下のコードを見れば、このパターンの仕組みをより良く理解できるでしょう。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;このコードで、Tasksはレコードが新規作成された際の追加に責任を持ち、TasksItemは個々のレコードに対する変更や破棄のイベントに対する処理（必要に応じてレコードの再描画を行います）に責任を持ちます。コードは複雑になりましたが、いくつかの点でRenderパターンよりも優れています。&lt;br /&gt;まず、ElementパターンはRenderパターンよりも効率的です。項目が1つ変更されただけでリスト全体が再描画されてしまうようなことはなくなりました。また、個々の項目に対してはるかに詳細な制御が可能になりました。イベントハンドラ（例ではclick()）を設定したり、個々の項目単位で描画を行ったりできます。&lt;/p&gt;
&lt;/blockquote&gt;</content>
	</entry>
	
	<entry>
		<id>http://fingaholic.github.com/posts/2012-07-25-stateful-javascript.html</id>
		<link type="text/html" rel="alternate" href="http://fingaholic.github.com/posts/2012-07-25-stateful-javascript.html"/>
		<title>ステートフルJavaScript 6章</title>
		<updated>2012-07-25T00:00:00+09:00</updated>
		<author>
			<name></name>
			<uri>http://fingaholic.github.com</uri>
		</author>
		<content type="html">&lt;blockquote&gt;
&lt;p&gt;依存性管理の仕組みが求められる背景には、手動管理の困難さだけでなく処理速度の問題も存在します。ブラウザはscriptタグで指定されているJavaScriptファイルのそれぞれに対してHTTPリクエストを行います。リクエストは並列して行えますが、多数の接続を行うというのは非常にコストのかかる処理です。接続の1つ1つについて、CookieをはじめとするHTTPヘッダの送受信やTCPハンドシェイクなどの付加が強いられます。SSL経由でアプリケーションが提供されている場合、事態はさらに悪化します。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;モバイル対応も考えるとリソースの削減は必須。&lt;/p&gt;

&lt;h1 id='61_commonjs'&gt;6.1 CommonJS&lt;/h1&gt;

&lt;p&gt;名前は聞いたことあるけどあまり意識したことなかった。お恥ずかしい。。。&lt;/p&gt;

&lt;p&gt;そもそもCommonJSとは&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;JavaScriptでいろんなアプリケーションを作るための標準仕様。（を策定するプロジェクト）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;と下記スライドにあった。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;CommonJSというライブラリはこの世に存在しない。あくまで仕様を決めているだけ。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;実はずっとライブラリだと思ってました。お恥ずかしい。。。&lt;/p&gt;

&lt;p&gt;その他CommonJSについての概要や仕様は下記スライドが分かりやすかったのでぜひに。もともとはサーバーサイドJSのための仕様だったのね。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://www.slideshare.net/terurou/common-js' title='CommonJSの話'&gt;CommonJSの話&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='611_'&gt;6.1.1 モジュールの宣言&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;CommonJSを使ってモジュールを宣言するのは簡単です。ここでは名前空間の仕組みが直接取り込まれています。モジュールは個別にファイルに記述し、共有したい変数はインタプリタによって定義されるexportsオブジェクトに対して公開します。コード例は以下のようになります。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;モジュールの中で定義されている関数を呼び出したい場合に必要なコードはrequire()のみであり、ここにモジュールのファイルを指定します。読み込んだ内容はローカル変数に保存されます。この例では、math.jsで公開されている関数はすべてMaths関数を通じて利用可能です。ここでのポイントは、モジュールが名前空間の中に置かれることと、Narwhal（&lt;a href='https://github.com/tlrobinson/narwhal' title='https://github.com/tlrobinson/narwhal'&gt;https://github.com/tlrobinson/narwhal&lt;/a&gt;）やNode.jsといったCommonJS準拠のすべてのJavaScriptインタプリタ上で動作するという点です。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id='612_'&gt;6.1.2 モジュールとブラウザ&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;以上のような仕組みがクライアント側でのJavaScript開発にとってどのような意味を持つのか考えてみましょう。クライアント側でモジュールを使うことの問題点すなわち、CommonJSのモジュールは同期形式で読み込まれる必要があるということについて多くの開発者がきづいています。サーバー側で実行されるJavaScriptではこのことは大きな問題になりませんが、クライアント側では読み込みの間UIを利用できず、しかも避けるべきeval()によるスクリプトの解釈が必要になってしまいます。この問題に対処するため、CommonJSの開発チームはModule Transport Format（&lt;a href='http://wiki.commonjs.ofg/wiki/Modules/Transport' title='http://wiki.commonjs.ofg/wiki/Modules/Transport'&gt;http://wiki.commonjs.ofg/wiki/Modules/Transport&lt;/a&gt;）という仕様を提案しています。この仕様で定義されている形式に基づいてCommonJSのモジュールはコールバックとともにラップされ、クライアント側での非同期形式の読み込みが可能になっています。&lt;br /&gt;先ほどの例に戻り、Module Transport Formatを使ってモジュールをラップします。これによってモジュールは非同期形式で読み込まれ、ブラウザとの相性の良いモジュールが実現されます。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;このモジュールはモジュールローダーのライブラリによって取得され、ブラウザ上で実行されます。このことが持つ意味は小さくありません。優れたアプリケーションに欠かせないモジュール形式のコンポーネントを実現出来るだけでなく、依存性の管理や有効範囲の隔離、名前空間の指定なども可能になっています。実際に、このモジュールはブラウザだけでなくサーバーやデスクトップアプリケーションなどでも、CommonJSに準拠さえしていればどの様な環境でも動作が可能です。言い換えると、同じコードをサーバーとクライアントの両方で利用できるのです。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id='62_'&gt;6.2 モジュールローダー&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;CommonJSモジュールをクライアント側で利用するには、モジュールを読み込むためのモジュールローダーと呼ばれるライブラリが必要です。多数のモジュールローダーが知られており、それぞれに長所も短所もあります。ここでは主なものをいくつか取り上げるので、読者の判断材料にしてください。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id='621_yabble'&gt;6.2.1 Yabble&lt;/h2&gt;

&lt;p&gt;多分使わないので割愛。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='https://github.com/jbrantly/yabble/' title='jbrantly/yabble'&gt;jbrantly/yabble&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='622_requirejs'&gt;6.2.2 RequireJS&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Yabbleに対抗する有力な選択肢がRequireJS（&lt;a href='http://requirejs.org/' title='RequireJS'&gt;RequireJS&lt;/a&gt;）であり、最も広く利用されているモジュールローダーの1つです。RequireJSでのモジュールの読み込み方法は他と少し異なり、AMD（Asynchronous Module Definition。&lt;a href='http://wiki.commonjs.org/wiki/Modules/AsynchronousDefinition' title='http://wiki.commonjs.org/wiki/Modules/AsynchronousDefinition'&gt;http://wiki.commonjs.org/wiki/Modules/AsynchronousDefinition&lt;/a&gt;）という形式に従っています。利用の際に留意するべきなのは、依存性の評価が（必要になる前に）積極的に行われるという点です。しかし、実質的にはRequireJSとCommonJSのモジュールは完全に互換性があり、ラップするトランスポートが異なるだけです。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;RequireJSはjQueryを内包してるバージョンがあって一時期使ってた。ただアプリというか通常のサイトで使用しようとするとページごとにJS読み込ませたい時とかにちょっとした問題があって結局使うのをやめた（URL dispatcherとかで分岐させればページごとも可能っちゃ可能？）。ちょっと古いけどtakazudoさんも記事にしていた。まあアプリなら選択肢として考えてもいいかと思う。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://hamalog.tumblr.com/post/4780725429/script-loading-solution-yepnope-js' title='script loading solution? yepnope.js !? - Takazudo hamalog'&gt;script loading solution? yepnope.js !? - Takazudo hamalog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;使用方法については割愛。&lt;/p&gt;

&lt;h1 id='63_'&gt;6.3 複数のモジュールとラッピング&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;ここまで依存性の管理と名前空間について学んできましたが、多数のHTTPリクエストが発生してしまうよいう問題点はまだ解決されていません。依存先のモジュールのそれぞれについて、ネットワーク経由の読み込みが必要になります。たとえ非同期形式で行ったとしても、読み込みには無視できないオーバーヘッドが生じ、アプリケーションの起動にかかる時間が長くなってしまいます。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;本ではサーバー側でminifyとありますが、ここはgrunt一択。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='/posts/2012-05-02-grunt.html' title='gruntをインストールする - Windows Vista'&gt;gruntをインストールする - Windows Vista&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='/posts/2012-05-01-grunt.html' title='gruntをインストールする - Mac OSX Lion'&gt;gruntをインストールする - Mac OSX Lion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id='64_'&gt;6.4 その他の依存性管理ツール&lt;/h1&gt;

&lt;p&gt;Sprocketsについては割愛。&lt;/p&gt;

&lt;h2 id='641_labjs'&gt;6.4.1 LABjs&lt;/h2&gt;

&lt;p&gt;KAYACさんのサイトで使用されてる。ラッパー作ってそこで分岐してからページごとに読み込ませてる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://www.kayac.com/' title='面白法人カヤック'&gt;面白法人カヤック&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id='65_fubc'&gt;6.5 FUBC&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;どんなスクリプトローダーを利用する場合でも、ページの読込中にユーザーがFUBC（flash of unbehaviored content。ふるまいが設定されていないコンテンツの一時的な表示）を目にする可能性があるという点に注意が必要です。これは、JavaScriptが実行される前の状態のページが一瞬表示されてしまうという問題です。初期状態のページに対して、JavaScriptを使った操作やスタイル設定を行なっていない場合は問題ありません。もし行なっているなら、CSSを使ってスタイルの初期設定を行う、要素を非表示にする、読込中であることを表すスプラッシュスクリーンを用意する、などの対策が必要です。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;FUBCっていうのか。知らんかった。&lt;/p&gt;</content>
	</entry>
	
	<entry>
		<id>http://fingaholic.github.com/posts/2012-07-23-stateful-javascript.html</id>
		<link type="text/html" rel="alternate" href="http://fingaholic.github.com/posts/2012-07-23-stateful-javascript.html"/>
		<title>ステートフルJavaScript 5章</title>
		<updated>2012-07-23T00:00:00+09:00</updated>
		<author>
			<name></name>
			<uri>http://fingaholic.github.com</uri>
		</author>
		<content type="html">&lt;blockquote&gt;
&lt;p&gt;ビューはアプリケーションにとってのインターフェースであり、ユーザーはビューの表示を目にし、そしてビューに対して操作を行います。本書で作成しているコードでは、ビューはロジックを持たないHTMLの断片であり、アプリケーションのコントローラ（イベントハンドラやデータの操作を受け持ちます）によって管理されています。ビューの中にロジックを記述しようという強い誘惑にかられることがしばしばありますが、これはMVCによる抽象化に反しており、絶対に行ってはなりません。無意味なスパゲッティコードへとつながる行為は慎むべきです。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id='51_'&gt;5.1 ビューの動的な描画&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;ビューを生成する1つの方法として、JavaScriptのコードによって生成するというものがあります。DOMの要素を作成するにはdocument.createElement()関数を使用します。作成された要素にコンテンツをセットし、ページのDOMの中に追加します。ビューを再描画する場合は、要素コンテンツを空にしてから改めて描画を行います。一連の処理の例を以下に示します。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;jQueryを使うとこのコードはよりシンプルにできます。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ただし、この手法が勧められるのはビューがきわめて小規模（要素が2個か3個程度）の場合に限られます。コントローラや状態機械にビューの要素をもたせると、アプリケーションのMVCアーキテクチャが損なわれます。&lt;br /&gt;何もない状態から要素を生成するのではなく、静的HTMLをページ内に用意しておき、必要に応じて表示と非表示を切り替えるというのを筆者は推奨します。こうすることによって、ビューに固有のコードをコントローラの中から可能な限り排除でき、必要なら要素のコンテンツを更新することも可能です。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id='52_'&gt;5.2 テンプレート&lt;/h1&gt;

&lt;p&gt;jQuery.tmpl（&lt;a href='http://api.jquery.com/category/plugins/templates/' title='http://api.jquery.com/category/plugins/templates/'&gt;http://api.jquery.com/category/plugins/templates/&lt;/a&gt;）の概要、使用方法についての解説。Backbone.js使用時ならUnderscore.jsのtemplate()関数かjQuery.tmplの二択だろうか？&lt;/p&gt;

&lt;h2 id='521_'&gt;5.2.1 テンプレートヘルパ&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;日付や数字を出力するなどの目的で、汎用のヘルパ関数をビュー内に用意すると便利なことがあります。もちろん、MVCのアーキテクチャを常に意識していることは重要であり、ビューの中になんでも関数を追加すれば良いというわけではありません。例えば、プレインテキストの中にあるURLを&amp;#60;a&amp;#62;タグに置き換えたいとします。以下のようなコードは明らかに望ましくありません。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;関数をビューに直接埋め込んでしまうのではなく、抽象化と名前空間の設定が必要です。こうすることによって、ロジックの詳細をビューから切り離せます。ここではhelpers.jsというファイルを用意し、補助的な関数を記述します。関数名はautoLink()とします。以下のように、ヘルパを使うとビューをシンプルに出来ます。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;helper.js&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;template.html&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;h2 id='522_'&gt;5.2.2 テンプレートの配置&lt;/h2&gt;

&lt;p&gt;下記のようにHTMLにカスタムのscriptタグを利用して埋め込む手法が推奨されている。&lt;/p&gt;

&lt;p&gt;ちなみにここで言うカスタムのscriptタグとは、scriptタグでtype属性にtext/javascript以外を指定するとjavascriptとしてパースされずに無視されるので、ブラウザ上では認識されない文字列として使用出来る特性を利用したものを指す。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;jQuery.tmplの内部では、1回利用されたテンプレートはコンパイルされキャッシュされています。そのため、2回目以降の処理では再コンパイルが不要になり高速です。なお、ここではテンプレートの処理を経た要素をページに追加しています。この方法はページ上にすでに存在する要素を操作する場合よりも高速であり、常にこの順番で処理を行うべきです。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id='53_'&gt;5.3 バインディング&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;バインディングを利用すると、クライアント側でビューを描画することの本当のメリットを実感できるはずです。本質的には、バインディングはビューの要素とJavaScriptのオブジェクト（通常はモデルを表します）を結びつけるための仕組みです。オブジェクトが変更されると、自動的にビューにも変更が反映されます。言い換えると、アプリケーションのモデルを更新するとビューが自動で再描画されます。&lt;br /&gt;バインディングは非常に重要です。ビューの更新はバックグラウンドで自動的に行われるため、コントローラのコードがビューを更新しなくても済むようになります。また、バインディングに基づいてアプリケーションを構成すると、8章で紹介するリアルタイムアプリケーションの実現も用意になります。&lt;br /&gt;JavaScriptのオブジェクトとビューの間にバインディングを設定するには、ビューに更新を指示するためのコールバックを用意します。オブジェクトのプロパティが変化した際にこのコールバックが呼び出されるようにしたいのですが、ネイティブなJavaScriptにはこのような仕組みが存在しません。RubyやPythonでのmethod_missingに相当するものはなく、JavaScriptのgetterとsetter（http://ejohn.org/blog/javascript-getters-and-setters/）を使ったエミュレーションも不可能です。しかしJavaScriptは高度に動的な言語であり、以下のようにしてコールバックを実現できます。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;このaddChange()関数は、引数として渡された任意のオブジェクトにchange()関数を追加します。change()はjQueryのchangeイベントとまったく同じようにふるまいます。change()を呼び出す際に引数として関数を渡すと、この関数がコールバックとして機能します。また、引数なしでchange()を呼び出しイベントを発生させることもできます。コードを見てみましょう。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;上記実行結果が下記。&lt;/p&gt;
&lt;iframe allowfullscreen='allowfullscreen' frameborder='0' src='http://jsfiddle.net/FiNGAHOLiC/qm4rg/embedded/' style='width: 100%; height: 450px'&gt;sample&lt;/iframe&gt;
&lt;h2 id='531_'&gt;5.3.1 モジュールへのバインディング&lt;/h2&gt;

&lt;p&gt;下記モデルに対してのバインディングの実例。&lt;/p&gt;
&lt;iframe allowfullscreen='allowfullscreen' frameborder='0' src='http://jsfiddle.net/FiNGAHOLiC/xg9VS/embedded/' style='width: 100%; height: 450px'&gt;sample&lt;/iframe&gt;</content>
	</entry>
	
	<entry>
		<id>http://fingaholic.github.com/posts/2012-07-20-stateful-javascript.html</id>
		<link type="text/html" rel="alternate" href="http://fingaholic.github.com/posts/2012-07-20-stateful-javascript.html"/>
		<title>ステートフルJavaScript 4章</title>
		<updated>2012-07-20T00:00:00+09:00</updated>
		<author>
			<name></name>
			<uri>http://fingaholic.github.com</uri>
		</author>
		<content type="html">&lt;blockquote&gt;
&lt;p&gt;そもそも、コントローラとは一体何でしょうか。簡単に言うなら、コントローラはアプリケーションの中でビューとモデルとをつなぐ接着剤の役割を果すものです。ビューとモデルの双方に関与しているコンポーネントはコントローラだけです。ページが読み込まれると、コントローラはビューにイベントハンドラを関連付け、コールバックを適切に処理し、必要に応じてモデルとのやり取りも行います。&lt;br /&gt;便利なライブラリも存在しますが、コントローラの作成にライブラリは必須ではありません。コントローラにとって必要なのは、モジュール性を持ち独立した存在であるということだけです。疎結合度の高いコンポーネントとしてふるまうべきであり、グローバル変数を定義したりすることは可能な限り避けなければなりません。これを実現するための優れた手法がModuleパターンです。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id='41_module'&gt;4.1 Moduleパターン&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;ロジックをカプセル化してグローバル変数の衝突による汚染を避ける上で、Moduleパターンは非常に効果的です。これを可能にするのが、おそらくjavaScriptが持つ最も優れた機能であろう匿名関数です。以下のコードのように、作成した匿名関数は直後に実行してしまいます。匿名関数によって、その内部のコードをクロージャとして実行でき、変数をローカルでプライベートな環境内に置くことができます。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;この辺りは「&lt;a href='http://www.oreilly.co.jp/books/9784873114880/' title='JavaScriptパターン'&gt;JavaScriptパターン&lt;/a&gt;」見るといいかも。&lt;br /&gt;古い記事だけど下記リンクも参考になる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://archiva.jp/web/javascript/writing_style.html' title='JavaScriptの巧い書き方 - Archiva'&gt;JavaScriptの巧い書き方 - Archiva&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='411_'&gt;4.1.1 グローバル変数のインポート&lt;/h2&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;グローバル変数よりローカル変数なので高速で効率的なので、匿名関数への引数としてグローバル変数を渡して、ローカル変数で使いましょうねと。ちなみにjQueryでもやってる。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;undefinedに関しては下記リンク先に書いてあるとおり、JavaScriptのundefinedは上書きが可能な値なので、ローカルスコープ内でundefinedはundefinedと保証させるために設定している。&lt;/p&gt;

&lt;p&gt;で、windowとdocumentに関してはJSのminifierのためらしい。JSのminifierはローカルスコープで一文字の変数に置き換えるのでちょっと軽くなるとの事。まあ体感で感じることはないんだろうけども。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://hamalog.tumblr.com/post/4047986427/jsscope' title='JSでローカルスコープ作るときのアレの意味 - Takazudo hamalog'&gt;JSでローカルスコープ作るときのアレの意味 - Takazudo hamalog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='412_'&gt;4.1.2 グローバル変数のエクスポート&lt;/h2&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;インポートの逆。windowオブジェクトをモジュール内にインポートしてプロパティをセット。&lt;/p&gt;

&lt;h1 id='42_'&gt;4.2 コンテキストの定義&lt;/h1&gt;

&lt;p&gt;そもそもコンテキストってなんなのか？&lt;a href='http://www.sophia-it.com/content/%E3%82%B3%E3%83%B3%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88' title='コンテキストとは (context)： - IT用語辞典バイナリ'&gt;コンテキストとは (context)： - IT用語辞典バイナリ&lt;/a&gt;で調べてみると、&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;コンテキストとは、プログラムの実行に必要な各種情報のことである。&lt;br /&gt;「context」（コンテキスト）は、「文脈」、「前後関係」などと訳されるが、IT用語としては意味がイメージしづらく、単にコンテキストとある場合は、何らかの制御情報と考える方がわかりやすいことが多い。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;とある。どうもイメージしづらい。&lt;a href='http://wikiwiki.jp/webapp/?cmd=read&amp;amp;page=ECMAScript%2F%BC%C2%B9%D4%A5%B3%A5%F3%A5%C6%A5%AD%A5%B9%A5%C8' title='ECMAScript 実行コンテキスト - Web Application Programming Wiki'&gt;ECMAScript 実行コンテキスト - Web Application Programming Wiki&lt;/a&gt;を読むと、実行コンテキストは、&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;thisの値&lt;br /&gt;スコープチェイン&lt;br /&gt;変数オブジェクト&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;の情報を持つとある。まだ完全に把握は出来ないけど上記をイメージして読むと何となく意味は掴めた。要はざっくりとthisとその有効範囲ってニュアンスでいいのかな？&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;このコードでは、contextFunction()関数の中でのコンテキストはmodオブジェクトというローカルなものになります。ここでは、誤ってグローバル変数を作成してしまうことはないので、安心してthisを利用できます。実際の使われ方を明確に示すために、このコードを具体化してみます。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;本に記載されているサンプルコードだとload()関数内のコールバックを$関数で実行してるけどなんか気持ち悪いのは自分だけだろうか？$.proxy(func, this)();でもよかったような気がする。&lt;/p&gt;

&lt;h2 id='421_'&gt;4.2.1 ライブラリへの抽象化&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;ここまでのコードをライブラリとして抽象化し、他のモジュールやコントローラでも利用できるようにしましょう。先ほどのload()関数を追加するとともに、proxy()やinclude()といった新しい関数も加えます。コードは以下のようになります。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;本のコードだと動作しないので&lt;a href='https://github.com/maccman/book-assets/blob/master/ch04/modules.html' title='Github上のサンプルコード'&gt;Github上のサンプルコード&lt;/a&gt;を実行したのが下記。&lt;/p&gt;
&lt;iframe allowfullscreen='allowfullscreen' frameborder='0' src='http://jsfiddle.net/FiNGAHOLiC/DXpc9/embedded/' style='width: 100%; height: 450px'&gt;sample&lt;/iframe&gt;
&lt;blockquote&gt;
&lt;p&gt;ローカル変数の代わりにコンテキストを利用する場合、thisというキーワードを毎回記述しなければならずコードは若干増大します。しかし、コンテキストによってコードの再利用の可能性が大幅に高まります。例えば、以下のようにコントローラのプロトタイプにプロパティをセットすることによって、すべてのControllerインスタンスに関数を追加できます。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;h2 id='422_'&gt;4.2.2 ドキュメントの後にコントーラを読み込む&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;現状のコードでは、本書のコントローラの一部はDOMよりも先に読み込まれる一方、ページのドキュメントが読み込まれた後で呼び出されるコールバックも存在します。このことは、コントローラのロジックが異なる内部状態のもとで実行されるという意味であり、ドキュメントの読み込み時のコールバックが複雑化することになります。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;これを修正したのが下記コード。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;新しいコードでは、Controller.create()関数を使ってコントローラを生成します。この際にインスタンスプロパティをオブジェクトとして渡すこともできます。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;下記が実行例。&lt;/p&gt;
&lt;iframe allowfullscreen='allowfullscreen' frameborder='0' src='http://jsfiddle.net/FiNGAHOLiC/PnLNV/embedded/' style='width: 100%; height: 450px'&gt;sample&lt;/iframe&gt;
&lt;blockquote&gt;
&lt;p&gt;大きな変更点はもう一つあり、コントローラのインスタンス化時にview要素を渡しています。以前のコードではコントローラ内で要素を取得していました。コントローラを異なる要素に対しても利用でき、コードの重複を最小限にできるという点で、この変更には大きな意味があります。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id='423_'&gt;4.2.3 ビューへのアクセス&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;ビュー毎にコントローラを1つずつ用意するというのが、よく使われているパターンです。ビューはID値を持っており、用意に取り出してコントローラに渡せます。一方ビューの中では、他のビューの要素との競合を防ぐためにID値ではなくクラスが使われます。一般的にはこのパターンがアプリケーションに良い構造をもたらしてくれるのですが、固執する必要はありません。&lt;br /&gt;ここまでのコードではjQuery()あるいは$()のセレクタを使ってビューにアクセスし、コントローラ内のローカルにビューへの参照を保持していました。ビュー内の要素を取り出す（以下のコードを参照）際にビュー外を探索せずに済むのが効率的です。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;一方このアプローチでは、コントローラにセレクタが多数記述され、DOM内の探索が頻繁に行われることになります。そこで、セレクタと変数名の対応を表す表をコントローラの中に設けることにします。コードは下記のとおりです。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;コントローラがインスタンス化される際に、それぞれのセレクタに対応する要素が取り出され、変数this.searchFormとthis.searchInputへと確実にセットされます。これらは通常のjQueryのオブジェクトなので、イベントハンドラの設定や属性値の取り出しなども通常どおり行えます。&lt;br /&gt;この機能をコントローラにも追加し、すべてのセレクタからローカル変数を生成することにします。この処理は、コントローラの初期化時に呼び出されるinit()関数の中で以下のようにして行います。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;refreshElements()はコントローラから現在の要素を表すプロパティelを受け取り、セレクタによる探索をこの要素の中で行います。refreshElements()が呼び出されると、this.searchFormとthis.searchInputの書くプロパティに対応する要素がコントローラ内にセットされ、イベントの関連づけやDOMの操作などに利用できるようになります。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;下記が実行例。&lt;/p&gt;
&lt;iframe allowfullscreen='allowfullscreen' frameborder='0' src='http://jsfiddle.net/FiNGAHOLiC/yN292/embedded/' style='width: 100%; height: 450px'&gt;sample&lt;/iframe&gt;
&lt;p&gt;大分分離できて汎用的に使いまわせそうになってきたけどthis.searchForm.submit(this.proxy(this.search));が気になるよねと。&lt;/p&gt;

&lt;h2 id='424_'&gt;4.2.4 イベント処理の委託&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;イベントの関連づけをすべて解除したり中継したりするといったことも可能です。このためにはeventsというオブジェクトを用意し、イベントの種類とセレクタそしてコールバックとの対応を記述します。eventsのデータ構造はelementsオブジェクトによく似ており、以下のようになります。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;この仕組みをSearchViewコントローラにも適用します。refreshElements()と同様に、delegateEvents()という関数を用意してコントローラの初期化時に呼び出されるようにします。この関数はコントローラのeventsオブジェクトの内容を調べ、イベントのコールバックを設定します。具体的には、ビュー内のフォームが送信された際にsearch()関数を呼び出します。コードは以下のようになります。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;delegateEvents()の中で、delegate()とbind()の各関数を利用しています。セレクタが指定されていない場合、イベントハンドラはelの指す要素に直接セットされます。その他の場合は、イベント委譲（&lt;a href='http://api.jquery.com/delegate' title='.delegate() &amp;amp;#8211; jQuery API'&gt;.delegate() &amp;#8211; jQuery API&lt;/a&gt;）され、セレクタで指定された要素で該当のイベントが発生するとハンドラが呼び出されます。委譲を利用することによって、記述しなければならないイベントリスナの数を削減できることがしばしばあります。イベントにはバブリングの性質があるため、親要素でもイベントを補足でき、個々の子要素でイベントリスナを設定する必要はありません。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;下記が実行例。&lt;/p&gt;
&lt;iframe allowfullscreen='allowfullscreen' frameborder='0' src='http://jsfiddle.net/FiNGAHOLiC/vbJSc/embedded/' style='width: 100%; height: 450px'&gt;sample&lt;/iframe&gt;
&lt;h1 id='43_'&gt;4.3 状態機械&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;状態機械（state machine）はより正確には有限状態機械（finite state machineあるいはFSM）と言い、UIをプログラムする際に役立ちます。状態機械を使うと複数のコントローラを管理したり、ビューの表示あるいは非表示の切り替えを容易に行えます。状態機械とは、状態（state）と遷移（transition）の2つから構成されます。複数の状態の中で1つだけがアクティブであり、その他はパッシブです。状態が切り替わる際に、2つの状態の間の遷移が遷移が呼び出されます。&lt;br /&gt;この概念を実際のプログラムに当てはめてみましょう。それぞれ独立して表示されるビュー（連絡先の内容表示とその編集など）があるとします。これらのビューは排他表示であり、片方が表示されたらもう片方は非表示になる必要があります。このように、常にどれか1つのビューだけがアクティブであるというシナリオは状態機械にぴったりです。状態機械を取り入れていれば、他のビュー（設定画面など）を追加するのも簡単です。&lt;br /&gt;状態機械の実装方法を把握するために、例を1つ紹介します。この例はとてもシンプルであり複数の種類の遷移には対応していないのですが、実装の概要を理解するためには十分でしょう。まず、jQueryのイベントAPI（2章参照）を使ったEventsオブジェクトを定義し、状態機械上でのイベントに対して関連付けを行ったりイベントを発生させたりできるようにします。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Eventsオブジェクトは本質的に、DOM外でのイベントというjQueryの機能を拡張し、ライブラリの中で利用できるようにしただけのものです。続いて、状態機械を表すStateMachineクラスを定義します。ここには以下のように、add()というメインとなる関数が用意されます。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;add()関数は、受け取ったコントローラを内部状態のリストに追加し、active()関数を定義します。このactive()が呼び出されると、対象のコントローラへとアクティブな状態が遷移します。そしてアクティブなコントローラに対してactivate()を呼び出し、その他すべてのコントローラに対してdeactivate()を呼び出します。以下のコードでは、実際のふるまいを確認するために、コントローラを2つ作成して状態機械に追加しています。そして1つ目のコントローラをアクティブ化しています。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;状態機械のadd()関数は、changeイベントのコールバックを作成し、その中でactivate()とdeactivate()のうち適切なほうを呼び出します。active()関数を呼び出す他に、以下のように、自分でchangeイベントを発生させても状態遷移を行えます。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;コントローラのactivate()関数の中で、ビューのセットアップや表示、要素の追加などを行えます。同様に、deactivate()関数の中ではビューの非表示化に関連する処理を行えます。ビューの表示と非表示の操作にはCSSクラスを利用するのが便利です。次のように、ビューがアクティブになったら何らかのクラス（例えば.activeなど）を追加し、アクティブでなくなったらそのクラスを削除します。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;そしてスタイルシートでは、このクラスが指定されている要素を表示し、指定されていない要素は非表示にします。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;下記が実行例。&lt;/p&gt;
&lt;iframe allowfullscreen='allowfullscreen' frameborder='0' src='http://jsfiddle.net/FiNGAHOLiC/sY79V/embedded/' style='width: 100%; height: 450px'&gt;sample&lt;/iframe&gt;
&lt;h1 id='44_'&gt;4.4 ルーティング&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;内部状態が変化したらURLも変化し、URLが変更されたらそれに合わせて内部状態も更新します。初回のページ読み込み時にURLをチェックし、それに対応する内部状態をセットアップします。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id='441_url'&gt;4.4.1 URLのハッシュ&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;ページの基底URLはページを再読み込みしなければ変化しませんが、再読み込みが発生するのは望ましくありません。これを回避する方法はいくつか考えられていますが、中でも長く使われてきているのがURLのハッシュ（#以降の文字列）を変更するというものです。ハッシュの値はサーバに送信されないため、ページの再読み込みを発生させることなしに変更できます。例えば筆者のTwitterページを表す以下のURLで、#!/maccmanの部分がハッシュです。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;location.hashオブジェクトを使うと、以下のようにしてページのハッシュを取得し変更することができます。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;URLにハッシュが含まれていない場合、location.hashの値は空文字列になります。それ以外の場合は、location.hashの値はURLのうちハッシュを表す部分（#も含みます）の文字列になります。&lt;br /&gt;ハッシュの値を頻繁に変更すると、（特にモバイルブラウザでは）大幅な処理速度の低下を招くことがあります。したがって、（例えばリスト表示のスクロールに合わせて内部状態を変更するなどのように）何度もハッシュを変更する必要が有る場合は、代替えとしてスロットリング（帯域制限）などの手法を検討するべきです。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;スロットリングがちょっとよく分からんかった。。。&lt;/p&gt;

&lt;h2 id='442_'&gt;4.4.2 ハッシュの変化の検知&lt;/h2&gt;

&lt;p&gt;IE8以上、Firefox3.6以上、Chrome全バージョン、Safariバージョン8以上、Operaバージョン10.6以上なら、&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;で検知可能。IE8以下ならjQueryプラグイン（&lt;a href='http://benalman.com/projects/jquery-hashchange-plugin/' title='http://benalman.com/projects/jquery-hashchange-plugin/'&gt;http://benalman.com/projects/jquery-hashchange-plugin/&lt;/a&gt;）が用意されているので、下記のようにして使用する。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;なお、このイベントはハッシュが変更された場合のみ発生し、ページの読み込み時には発生しません。したがって、ハッシュに基づくルーティングを行うなら、以下のようにしてページの読み込み時にhashchangeイベントを自分で発生させるとよいでしょう。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;h2 id='443_ajax_crawling'&gt;4.4.3 Ajax Crawling&lt;/h2&gt;

&lt;p&gt;ハッシュを監視してガリガリ動くWebアプリケーションはGoogle等の検索エンジンに対してどの様にインデックスされるかを解説している。この辺りは5509さんの記事が非常にわかり易かったので下記3記事に目を通しておけば良さげ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://5509.me/log/making-crawrable-contents-with-ajax' title='SEOにも強いクローラブルなAJAXコンテンツを作成するために  ::  5509'&gt;SEOにも強いクローラブルなAJAXコンテンツを作成するために :: 5509&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='http://5509.me/log/to-make-ajax-contents' title='SEOやJSオフ環境にも配慮したAjaxコンテンツを制作するためにできること  ::  5509'&gt;SEOやJSオフ環境にも配慮したAjaxコンテンツを制作するためにできること :: 5509&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='http://5509.me/log/ikenkudasai' title='AjaxコンテンツとGooglebot、インデックスの話  ::  5509'&gt;AjaxコンテンツとGooglebot、インデックスの話 :: 5509&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ポイントは何でもかんでもハッシュをシバン（hash=#、bang=!、合わせてshebang=シバンらしい）にする必要はなくて、&lt;strong&gt;GoogleのAjax Crawlingという仕様に準拠している場合にのみ使用&lt;/strong&gt;するものだということ。結局サーバーサイドでUgly URL（_escaped_fragment_に置換されたURL）対応でHTML Snapshotを返す等の作業が出来ない場合は意味がない。&lt;/p&gt;

&lt;p&gt;ちなみに現在のTwitterは一部を除いてシバンによる管理じゃなくなってた。&lt;/p&gt;

&lt;h2 id='444_html5history_api'&gt;4.4.4 HTML5のHistory API&lt;/h2&gt;

&lt;p&gt;前節を解決？する方法として最近実装も増えてきたHistory APIについての解説。この辺りはググればいっぱい出てくる。「pjax」（pushState + ajax）プラグインもありブラウザ間の挙動の差異を許容してくれるクライアントや案件ならぜひ実装したいところ。ただ問題点もあるのでその辺りはtakazudoさんの記事が参考になる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://hamalog.tumblr.com/post/8177396934/davis-js-history-api' title='Davis.jsでHistory APIを比較的お手軽に使う - Takazudo hamalog'&gt;Davis.jsでHistory APIを比較的お手軽に使う - Takazudo hamalog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;その他pjaxに関する参考リンクは下記から。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='https://github.com/defunkt/jquery-pjax/' title='defunkt/jquery-pjax'&gt;defunkt/jquery-pjax&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='http://d.hatena.ne.jp/punitan/20110404/1301895279' title='pjax こそが pushState + Ajax の本命 - punitan (a.k.a. punytan) のメモ'&gt;pjax こそが pushState + Ajax の本命 - punitan (a.k.a. punytan) のメモ&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='http://blog.monoweb.info/article/2011050321.html' title='pjaxで実現する超高速Web | monoの開発ブログ'&gt;pjaxで実現する超高速Web | monoの開発ブログ&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='http://www.slideshare.net/KensakuKOMATSU/19html5' title='第19回html5とか勉強会 pjax'&gt;第19回html5とか勉強会 pjax&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='http://www.jmuk.org/diary/index.php/2011/06/03/pjax/' title='githubのURLをうまく扱うオシャレなアレ = pjax  @  val it: α → α = fun'&gt;githubのURLをうまく扱うオシャレなアレ = pjax @ val it: α → α = fun&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;お次はMVCのV、ビューとテンプレートについて。&lt;/p&gt;</content>
	</entry>
	
	<entry>
		<id>http://fingaholic.github.com/posts/2012-07-17-stateful-javascript.html</id>
		<link type="text/html" rel="alternate" href="http://fingaholic.github.com/posts/2012-07-17-stateful-javascript.html"/>
		<title>ステートフルJavaScript 3章</title>
		<updated>2012-07-17T00:00:00+09:00</updated>
		<author>
			<name></name>
			<uri>http://fingaholic.github.com</uri>
		</author>
		<content type="html">&lt;h1 id='31_mvc'&gt;3.1 MVCと名前空間&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;MVCパターンでは、データ管理はモデル（MVCのM）の中で行われます。モデルはビューやコントローラから切り離されていなければなりません。データの操作やふるまいに関するすべてのロジックは、モデルの中に適切な名前空間とともに保持されるべきです。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;これはなかなか実践出来てないところ。&lt;br /&gt;プラグイン化して管理、連携してるとモデルもビューもコントローラも混ぜ混ぜで書いてた。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ユーザーの配列にUser.recordsという名前空間を与えることができました。ユーザーについての処理を行う関数も、Userモデル配下の名前空間に関連づけることにします。例えば以下のように、ユーザーのデータをサーバから取得するためのfetchRemoteという関数を定義します。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;モデルが持つプロパティをすべて名前空間の中に置くと、プロパティ名の競合を避けることができ。同時にMVCへの準拠を確実なものにできます。また、複雑に絡まり合った関数やコールバックでコードが収拾のつかない状況に陥るのを防ぐこともできます。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ここまでは大丈夫。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;名前空間の考え方をさらに一歩進めて、Userのインスタンスに特有の関数をすべてUserオブジェクトに持たせることも可能です。例えば、ユーザーを削除するための関数destroy()があるとします。この関数はユーザーのオブジェクトを参照しているため、以下のようにUserインスタンスに対して呼び出せるようにするべきです。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;これを実現するには、Userを単なるオブジェクトでなくクラスとして定義します。コードは以下のようになります。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;特定のユーザーとの関連を持たない関数や変数については、以下のようにUserオブジェクト直下のプロパティとして宣言します。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;いわゆるクラスメソッドでクラスから生成されたオブジェクト間で共通で使用出来るメソッドとして設定してやると。&lt;/p&gt;

&lt;p&gt;名前空間については下記が参考リンク。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://michaux.ca/articles/javascript-namespacing' title='peter.michaux.ca - JavaScript Namespacing'&gt;peter.michaux.ca - JavaScript Namespacing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id='32_orm'&gt;3.2 ORMの作成&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;ORM（Object-Relational Mapping: オブジェクト関係マッピング）は従来、JavaScript以外の言語で使われるのが一般的でした。しかし、ORMは単に便利なデータ管理の手法であるだけではなく、モデルの利用法としても優れており、JavaScriptアプリケーションでも活用できます。例えば、ORMを使うとサーバ側のデータをモデルとして扱えます。ここではモデルのデータを変更すると、バックグラウンドでサーバーに対してAjaxリクエストが送信されます。また、モデルのインスタンスをHTMLの要素と関連づけることもできます。こうすると、インスタンスへの変更がビューに反映されることになります。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;？ サーバーサイドがあんまよく分からんから何となくしか理解できない。。。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;本質的に、ORMとは何らかのデータをラップしたオブジェクトのレイヤにすぎません。ORMはSQLデータベースの抽象化に使われるのが一般的ですが、ここではJavaScriptのデータ型を抽象化するためにORMを利用します。ORMというレイヤが加わると、独自の関数やプロパティを通じて単なるデータ構造により多くの機能を追加できるようになります。例えばデータの検証、監視、永続化あるいはサーバからのコールバックなどが、コードの再利用性を保ったまま実現できます。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ORMはこの文章だけだとちょっと掴みづらい。 ただどっかで見たことあるなーって思ったら「みんなのPython」、通称「みんPy」に分かりやすい説明が書いてあった。まさかこんなところで役に立つとは。&lt;br /&gt;ちなみにWebで閲覧できるので下記参考リンクよりどうぞ。&lt;br /&gt;著者の柴田淳さんに感謝。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;　既に解説してきたとおり、データベースでデータを扱う手法と、Pythonのようなオブジェクト指向的なデータの扱い方の間には大きなギャップがあります。データベースではデータとデータを操作するための手続きが完全に分離しています。対してオブジェクト指向言語では、データと手続きが一体になっています。データを扱う時の考え方がそもそも異なるので、プログラムの中でデータベースを扱うときには、非Pythonな方法でデータを扱う必要が出てきます。&lt;br /&gt;　Webアプリケーションにかぎらず、データの操作を行う処理は、プログラムの基本部分といってよいくらい重要な部分です。そのような重要な部分に、非Python的な手法を使わなければならないとすると、プログラムは手軽に書けなくなってしまいます。インスタンスの生成、アトリビュートへの代入やメソッド呼び出しなど、Python的な手法を使ってデータベースを操作できれば、もっと手軽に、かつ簡潔にプログラムが書けるようになるはずです。&lt;br /&gt;　&lt;strong&gt;O/Rマッパー&lt;/strong&gt;は、データベースとオブジェクト指向言語の間にあるギャップを埋める役割でよく利用される仕組みです。「O」は「オブジェクト」、「R」は「リレーショナル」を意味します。オブジェクト指向言語で利用されるオブジェクトと、リレーショナルデータベースのデータをうまくマッピングし、間を取り持ってくれる仕組みのことを指します。&lt;br /&gt;O/Rマッパーにはたくさんの種類があり、マッピングの手法もいろいろとあります。O/Rマッパー全体に共通しているのは、&lt;strong&gt;データベース上のデータをオブジェクトとして扱える&lt;/strong&gt;という特徴です。データを取り出したり、データを更新するために、SQL文字列を作る必要がほとんどありません。数値や文字列など、ごく普通のデータと同じように、データベース上のデータを扱えるのです。&lt;br /&gt;　O/Rマッパーを使っても、データベースと通信するためにはどこかで誰かがSQL文字列を作る必要があります。データベースとの実際の通信はO/Rマッパーが裏側で密かに実行しています。O/Rマッパー自体に、便利なメソッドが定義してあったり、演算子のオーバーライドといった手法を活用して、SQL文字列を組み立てｍ適切にデータベースと更新を行うような作りになっているわけです。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;PythonをJavaScriptに脳内補完すればなんとなくイメージはつかめると思う。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://ja.wikipedia.org/wiki/%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E9%96%A2%E4%BF%82%E3%83%9E%E3%83%83%E3%83%94%E3%83%B3%E3%82%B0' title='オブジェクト関係マッピング - Wikipedia'&gt;オブジェクト関係マッピング - Wikipedia&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='https://lindoc.jp/docs/1163' title='みんなのPython Webアプリ編 | Lindoc'&gt;みんなのPython Webアプリ編 | Lindoc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='321_'&gt;3.2.1 プロトタイプによる継承&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;ここでは、ORMの作成にObject.create()という関数を利用することにします。これは1章で紹介した例（クラスをベースにしています）とは少し異なります。コンストラクタ関数とキーワードnewを使う場合と比べて、Object.create()を使うとプロトタイプによる継承が可能になるというメリットがあります。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;正直Object.create()ってあんま実務で使ってこなかった。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Object.create()に引数としてプロトタイプオブジェクトを渡すと、そのプロトタイプに基づくオブジェクトが新たに生成されて返されます。言い換えると、渡したオブジェクトを継承した新しいオブジェクトが返されます。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ちなみにIEは対応してないため、下記を設定して追加してやる必要がある。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;ちなみに上記はDouglas Crockfordの下記記事を元にしている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://javascript.crockford.com/prototypal.html' title='Prototypal Inheritance'&gt;Prototypal Inheritance&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;で、出来上がったのが下記コード。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Object.create()を使い慣れていないと、このコードは奇妙なものに思えるかもしれません。細かく分割しながら見ていきましょう。この関数はModelオブジェクトを継承した新しいオブジェクトを返すので、これを新たなモデルを生成する際に使用することにします。したがって、init()関数はModel.prototypeから継承した新しいオブジェクトを返すことになります。例えば以下のように、Modelオブジェクトのインスタンスを取得できます。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;もうちょっと細かく説明して欲しかったけど要するに、&lt;strong&gt;Model.prototypeから継承した新しいオブジェクトを返す&lt;/strong&gt;っことね。&lt;br /&gt;prototypeオブジェクトを内包してるのって確かにあまり馴染みがないから奇妙？に見えた。&lt;/p&gt;

&lt;h2 id='322_orm'&gt;3.2.2 ORMのプロパティを追加する&lt;/h2&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;jQuery.extend()というのは、forループを使ってすべてのプロパティを追加することを表す短縮記法であり、上記のload()関数とほぼ等価です。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;これは1章でも出てきたやり方でプロパティを追加してるだけ。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;これから多数のプロパティを追加することになるので、以下のようにextend()とinclude()をModelオブジェクトの一部にしてしまいましょう。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;h2 id='323_'&gt;3.2.3 レコードの永続化&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;レコードは何らかの手段で永続化しなければなりません。言い換えると、生成されたインスタンスへの参照を保存し、後でアクセスできるようにする必要があります。ここでは、Modelオブジェクトが持つrecordsというオブジェクトを通じて永続化を行います。ここにはインスタンスを保存する際に参照が追加され、インスタンスを削除する際に参照も合わせて削除されます。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;インスタンスが変更された場合は、以下のようにrecordsが保持している参照も更新されます。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ここで補助的な関数を用意し、インスタンスの保存状態や保存する必要の有無をチェックせずに済むようにします。コードは以下のようになります。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;また、find()関数にID値を渡すと該当するオブジェクトが返されるようにします。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;ここまでのコードでちょっとまとめてみたのが下記。&lt;/p&gt;
&lt;iframe allowfullscreen='allowfullscreen' frameborder='0' src='http://jsfiddle.net/FiNGAHOLiC/HWvJm/embedded/' style='width: 100%; height: 450px'&gt;sample&lt;/iframe&gt;
&lt;h1 id='33_id'&gt;3.3 ID値の割り当て&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;現状のコードでは、レコードを保存する際には自分でIDの値を指定する必要があり非常に面倒です。これを自動化してみましょう。まず、GUID（Globally Unique Identifier）ジェネレータを使ってID値を生成します。技術的には、JavaScriptではAPIの制限もあり本来の意味でのGUIDを生成することはできず、擬似的な値しか生成できません。真にランダムなGUIDを生成するというのは非常に難しく、オペレーティングシステムではMACアドレスやマウスの位置、BIOSのチェックサム、電気的なノイズの量や放射線崩壊の測定値、ひいてはラバランプ（液体の中をかたまりが浮遊するインテリア用品）の状態などを元にしてGUIDを算出することもあります。しかし本書の目的に関する限り、JavaScriptにネイティブで用意されているMath.random()によって生成される擬似乱数でも十分です。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;放射線崩壊の測定値とかそこまでやるんだ。&lt;br /&gt;JavaScript関係ないけど勉強になります。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Robert KiefferはMath.random()を利用した使いやすく簡潔なGUIDジェネレータを公開しています（&lt;a href='http://www.broofa.com/2008/09/javascript-uuid-function/' title='Broofa.com  &amp;amp;raquo; Blog Archive   &amp;amp;raquo; Javascript UUID Function'&gt;Broofa.com &amp;#187; Blog Archive &amp;#187; Javascript UUID Function&lt;/a&gt;）。以下に示すとおり、コードはとてもシンプルです。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;実際リンク先のコードを見るとtoUpperCase()関数がなかったり、基数や文字列を指定できたりするコードも追加されてるみたいだった。 また、ジェネレータには上記以外にも下記リンクもある。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='https://gist.github.com/1308368' title='generate random v4 UUIDs (107 bytes) &amp;amp;mdash; Gist'&gt;generate random v4 UUIDs (107 bytes) &amp;#8212; Gist&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;で、ORMにもGUIDジェネレータを組み込んでみる。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;ちなみに本ではクラスメソッドにGUID生成の処理を入れてたけどこれをインスタンスメソッドで追加。 組み込んでみると正しく動作してるのを確認できた。&lt;/p&gt;
&lt;iframe allowfullscreen='allowfullscreen' frameborder='0' src='http://jsfiddle.net/FiNGAHOLiC/sSGtW/embedded/' style='width: 100%; height: 450px'&gt;sample&lt;/iframe&gt;
&lt;h1 id='34_'&gt;3.4 参照の管理&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;すでに気づかれている読者も多いと思われますが、ここまでのコードには参照の扱い方に関して明白な問題点が存在します。それは、インスタンスを保存するときやfind()が検索結果を返す際にインスタンスのクローンを作成していないという点です。そのため、プロパティを変更すると保存されているインスタンスも変更されてしまうことになります。これはupdate()関数が呼ばれた場合にのみ保存されているインスタンスを更新するという方針に反しています（以下のコードを参照）。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;そこでfind()関数が検索結果を返す際には新規生成されたオブジェクトを返すことにします。レコードが生成あるいは更新された場合にも、オブジェクトの複製を行います。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;問題点はもう1つあります。Model.recordsオブジェクトがすべてのモデルの間で共有されてしまっています。このことを示したのが以下のコードです。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;共有されることによって、以下のコードのようにすべてのレコードが混在してしまうという副作用が発生します。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;新しいモデルを定義するたび、新しいrecordsオブジェクトを生成することによってこの問題は解消できます。生成時にコールバック関数Model.created()が呼び出されるので、この中でモデルに固有のオブジェクトをセットできます。具体的には以下のようにします。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;h1 id='35_'&gt;3.5 データの読み込み&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;複数のページに区切られたリストを表示させるなら、ぜひ次のページを先読みするようにしましょう。よりよいやり方としては、ユーザーがリストをスクロールするのに合わせて自動的にデータを読み込んで表示させるというものがあります（Infinite Scrollパターンと呼ばれます）。いずれにせよ、ユーザーが感じる遅延をより少なくすることが望まれます。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;大抵初期表示用のデータだけ取得して表示ってパターンが多いからこの次のページの先読みってのが目から鱗だった。&lt;br /&gt;まあケースバイケースだとは思うけども。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;データを取得する際に、UIが停止しないようにしましょう。読み込み中であることを表すインジケータを表示させるとともに、その間もUIが引き続き利用可能なようにするべきです。UIの停止が必要とされるようなシナリオはほとんど考えられません。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ローダーの実装って実はすごく大事だっていう。ローダーの挙動って突き詰めると結構深かったりするし。 画像なし、CSS3（IE6はフォールバックでVML）を使用してローダーを実装できる&lt;a href='http://fgnass.github.com/spin.js/' title='spin.js'&gt;spin.js&lt;/a&gt;とか効果的に使いたい。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ページ上のデータは最初に読み込まれるページに含まれているか、AjaxあるいはJSONPを使ったHTTPリクエストによって事後的に読み込まれます。筆者としては後者のアプローチがお勧めです。多くのデータを初期表示のページに埋め込むことはページサイズの増大をもたらしますが、Ajax、JSONPによるリクエストは並列処理が可能であり高速です。またAjaxやJSONPを使って取得したページ自体とは別にキャッシュでき、リクエストのたびにページ全体を描画しなおす必要があります。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;これスクリプト無効時の事を考えると必ずしも上記のようには出来ない（初期表示時のみサーバーサイドで初期表示用のデータを含んだHTML吐き出し）けど、そういうの考えなくていいならこうすべきなのかな。&lt;/p&gt;

&lt;h2 id='351_'&gt;3.5.1 初期表示のページヘの埋め込み&lt;/h2&gt;

&lt;p&gt;WEBアプリケーションじゃなければこれは全然いいと思う。&lt;/p&gt;

&lt;h2 id='352_ajax'&gt;3.5.2 Ajaxによるデータの読み込み&lt;/h2&gt;

&lt;p&gt;まずはjQueryのAjaxのAPIの解説。&lt;br /&gt;ただ内部で何をやってるか知っておく必要はあるのでMozilla Developerの記事にも目を通しておいたほうがよい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='https://developer.mozilla.org/ja/Ajax/Getting_Started' title='Getting Started - MDN'&gt;Getting Started - MDN&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='http://api.jquery.com/category/ajax/' title='Ajax &amp;amp;#8211; jQuery API'&gt;Ajax &amp;#8211; jQuery API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Ajaxには同一生成元ポリシー（Same Origin Policy）という制約があります。これは、Ajaxリクエストの送信元はリクエスト元のページと同じドメインとサブドメインそしてポート番号の組み合わせを持っていなければならないというものです。このような制約の背景には、リクエストの際に対象ドメインのCookie情報が送信されてしまうという事情があります。つまり、リクエストを受け取ったサーバーはそれをログイン済みのユーザーからのものであると解釈してしまいます。同一生成元ポリシーがなかったとしたら、悪意を持ったアプリケーションはGmailのメールを盗み見したり、Facebookのステータスを勝手に変更したり、無断でTwitterのフォロワーにダイレクトメッセージを送ったりできてしまいます。このような事態を避けるために同一生成元ポリシーが適用されているのです。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ほうほう。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Adobe FlashやJavaなどのテクノロジーではドメイン間アクセス向けのポリシーファイルを定義することによってこの問題を回避しています。近年ではAjaxの側でも、標準規格CORS（Cross-Origin Resource Sharing）によって他ドメインへのアクセスを認めようという動きがあります（&lt;a href='http://www.w3.org/TR/access-control/' title='Cross-Origin Resource Sharing'&gt;Cross-Origin Resource Sharing&lt;/a&gt;）。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ただIE8未満は対応していない（IE8以降でも利用は出来るっぽいけどコンテンツタイプとしてtext/plainしかサポートしていない、認証、カスタムヘッダも利用できない等割りと酷いことになってるっぽい）。&lt;/p&gt;

&lt;h2 id='353_jsonp'&gt;3.5.3 JSONP&lt;/h2&gt;

&lt;p&gt;JSONPについての解説。実務レベルでクロスドメインリクエストを実装って考えると前項のCORSよりJSONPが一般的かと。&lt;/p&gt;

&lt;p&gt;話は少しそれるけど、&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;叩くと上記のようなものが返って来るとすると、&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;jsonpCallbackオプションでコールバック関数名を指定できる。&lt;/p&gt;

&lt;h2 id='354_'&gt;3.5.4 ドメイン間リクエストのセキュリティ&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;CORSやJSONPで任意のドメインからのアクセスを許可している場合は、以下のような点が非常に重要です。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;1. いかなるセンシティブな情報（メールアドレスなど）も公開してはなりません。 2. いかなるアクション（Twitterでのフォローなど）も許可してはなりません。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;これらの対策の代替として、接続を許可するドメインのリスト（ホワイトリスト）を定義したり、OAuthによる認証を必須にするといったものが考えられます。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;この辺りの問題は古いのもあるけど下記参考リンク内の記事を読むと分かりやすかった。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://d.hatena.ne.jp/tkng/20100918/1284792040' title='なぜJSONPだとクロスドメイン制約を超えられるのか？ - 射撃しつつ前転'&gt;なぜJSONPだとクロスドメイン制約を超えられるのか？ - 射撃しつつ前転&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='http://gihyo.jp/dev/serial/01/web20sec' title='ここが危ない！Web2.0のセキュリティ：第2回　Same-Originポリシーと迂回技術｜gihyo.jp … 技術評論社'&gt;ここが危ない！Web2.0のセキュリティ：第2回　Same-Originポリシーと迂回技術｜gihyo.jp … 技術評論社&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id='36_'&gt;3.6 データの配置&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;ORMへのデータの配置は簡単に行えます。サーバーからデータを取得し、モデルのレコードを更新するだけです。Modelオブジェクトにpopulate()関数を追加し、取得したそれぞれのデータを元にインスタンスを生成し、recordsオブジェクトを更新するようにします。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;このModel.populate()関数は、以下のようにしてサーバから受け取ったデータとともに呼び出します。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;h1 id='37_'&gt;3.7 データのローカル保存&lt;/h1&gt;

&lt;p&gt;HTML5のWebStorage（セッションストレージ、ローカルストレージ）APIについての解説。&lt;/p&gt;

&lt;p&gt;これまではCookieをストレージとして使用してきたけどHTML5でWebStorageが登場してからはこちらが主流に。ただIE8以上でないと使用出来ないのでターゲットブラウザによるけどやっぱり実務的には厳しいところもある。polyfillとしてCookieは必須なのかも。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://dev.classmethod.jp/ria/html5/p19676/' title='HTML5 × CSS3 × jQueryを真面目に勉強してみる ? #2 WebStorage ｜ Classmethod.dev()'&gt;HTML5 × CSS3 × jQueryを真面目に勉強してみる ? #2 WebStorage ｜ Classmethod.dev()&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='http://public-blog-dev.s3.amazonaws.com/wp-content/uploads/2012/02/storage_sample2.html' title='Web Storage Sample'&gt;Web Storage Sample&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='371_orm'&gt;3.7.1 ORMでのローカル保存&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;これまでに作ってきたORMに、ローカルストレージを利用するための変更を行います。この変更によって、ページが再読み込みされてもレコードが保持されるようになります。localStorageオブジェクトを利用するには、レコードをJSON形式の文字列へとシリアライズする必要があります。しかし、単純にシリアライズすると以下の様な文字列が生成されてしまいます。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;そこで、モデルがシリアライズされる際の処理内容を上書きする必要があります。まず、シリアライズするべきプロパティとそうでないものを区別します。Modelオブジェクトにattributesという配列を追加し、それぞれのモデルが属性すなわちプロパティを指定できるようにします。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;属性はモデルごとに異なり、複数のモデルが1つのattributes配列を共有することはできません。そのため、この配列はModelに直接追加するのではなく、モデルがインスタンス化されるたびに新しく生成するようにしています。これはrecordsオブジェクトの場合と同じアプローチです。&lt;br /&gt;次にattributes()関数を定義します。この関数はそれぞれの属性とその値からなるオブジェクトを返します。コードは以下のようになります。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;モデルが持つattributes配列には以下のようにして値をセットします。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;このコードで指定された内容に基づき、attributes()関数はシリアライズの必要があるプロパティだけを正しく返します。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;シリアライズの処理を行うコード（JSON.stringify()）の側では、変更の必要があるのはモデルのインスタンスが持つtoJSON関数だけです。JSONのライブラリは、与えられたオブジェクトをそのままシリアライズするのではなく、この関数を通じてシリアライズ対象のオブジェクトを取得しているのです。変更は以下のようにして行います。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ここまでのコードを使い、再びシリアライズを行なってみましょう。今度は必要なプロパティだけがシリアライズされているはずです。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;正しいJSON形式の文字列を生成できたので、後はローカルストレージを利用するためのコードを追加するだけです。ここではModelにsaveLocal()とloadLocal()という2つの関数を追加します。保存時にはModel.recordsオブジェクトを配列へと変換してからシリアライズし、生成された文字列をlocalStorageに格納します。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;レコードの取り出しはページの読み込み時に行い、ページが閉じられたらレコードを格納するのがよいでしょう。この部分のコードの作成については読者への宿題としておきます。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id='38_'&gt;3.8 新規レコードのサーバへの送信&lt;/h1&gt;

&lt;p&gt;前節で作成したattributes()関数を使用して下記のようにしてレコードをサーバへ送信できる。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;REST（Representative State Transfer）のルールに従うなら、レコードを新規作成する際にはPOST形式のリクエストを行い、レコードを更新する際にはPUT形式を利用するべきです。以下のように、ModelのインスタンスにcreateRemote()とupdateRemote()という2つの関数を追加し、それぞれ適切な形式のリクエストを行うようにします。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Assetインスタンスに対してcreateRemote()を呼び出すだけで、レコードの内容がサーバへとPOST形式で送信されるようになりました。利用例を以下に示します。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;後半サンプルコードの全体像が分からなくなってちょっと疑問点残る箇所があるけど何となく掴めた。&lt;br /&gt;この辺りは後々復習していこうかと。&lt;/p&gt;

&lt;p&gt;次はMVCのC、コントローラ。&lt;/p&gt;</content>
	</entry>
	
	<entry>
		<id>http://fingaholic.github.com/posts/2012-07-02-stateful-javascript.html</id>
		<link type="text/html" rel="alternate" href="http://fingaholic.github.com/posts/2012-07-02-stateful-javascript.html"/>
		<title>ステートフルJavaScript 2章</title>
		<updated>2012-07-02T00:00:00+09:00</updated>
		<author>
			<name></name>
			<uri>http://fingaholic.github.com</uri>
		</author>
		<content type="html">&lt;h1 id='21_'&gt;2.1 イベントの監視&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;イベントリスナを削除するにはremoveEventListener()を使います。ここには以下のように、addEventListenerで指定したのと同じ引数を指定します。リスナが匿名関数であるなどの理由でリスナへの参照が存在しない場合は、要素ごと破棄しない限りリスナを削除することはできません。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;まあ当たり前の事ですね。&lt;br /&gt;ちなみに非標準だけど第4引数はaWantsUntrustedで、信頼されないコンテンツによって引き起こされるイベントを許可する、なる項目もあるらしい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='https://developer.mozilla.org/ja/DOM/element.addEventListener,' title='element.addEventListener - MDN'&gt;element.addEventListener - MDN&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id='22_'&gt;2.2 イベントの発生順序&lt;/h1&gt;

&lt;p&gt;ある要素とその祖先に同じ種類のイベントを指定している場合、下記ブラウザによって挙動が違う。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Netscape4はイベントキャプチャリング（event capturing）に対応しています。ここでは、最も上位（外側）の要素からイベントが発生した要素へと順にイベントリスナが呼び出されていきます。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;これは分かりづらいと思う。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;一方、Microsoftが取り入れたのはイベントバブリング（event bubbling）という考え方です。ここでは、イベントが発生した要素（内側）から祖先要素へと順にイベントリスナが呼ばれます。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;バブリングの方がイメージしやすいのでaddEventListener（IEの場合はattachEvent）関数の第3引数にはfalse、または指定しないようにしておくのが一般的。&lt;/p&gt;

&lt;h1 id='23_'&gt;2.3 イベント処理のキャンセル&lt;/h1&gt;

&lt;p&gt;stopPropagation関数でバブリングを中止出来る。&lt;br /&gt;preventDefault関数でデフォルトのアクションをキャンセル出来る。&lt;br /&gt;※イベントハンドラが返り値としてfalseを返しても同様の効果がある。&lt;/p&gt;

&lt;h1 id='24_'&gt;2.4 イベントオブジェクト&lt;/h1&gt;

&lt;p&gt;下記参考リンク。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='https://developer.mozilla.org/ja/DOM/event,' title='event - MDN'&gt;event - MDN&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id='25_'&gt;2.5 イベントライブラリ&lt;/h1&gt;

&lt;p&gt;解説ではbind関数だけどjQuery1.7からはon、またはoffの方が良いかも。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://ginpen.com/2011/11/04/jquery-1-7/,' title='jQuery 1.7の更新内容をまとめたよ。 | Ginpen.com'&gt;jQuery 1.7の更新内容をまとめたよ。 | Ginpen.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id='26_'&gt;2.6 コンテキストの変化&lt;/h1&gt;

&lt;p&gt;まあ最初はよく分からんかった。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;上記を解決するには、&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;のように$.proxyでコンテキストとして利用したいオブジェクトを使用してやるといい。&lt;/p&gt;

&lt;h1 id='27_'&gt;2.7 イベントの委譲&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;子孫の要素でそれぞれイベントを設定するより祖先要素にリスナを1つ登録&lt;/strong&gt;すればいいよねと。&lt;br /&gt;これ割りと基本的な事だし実践的だから忘れないようにしないとなあ。余計なクラス付与しなくてもいいし。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;上記だとli要素それぞれにリスナを登録してるけど、&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;h1 id='28_'&gt;2.8 カスタムイベント&lt;/h1&gt;

&lt;p&gt;これはよく使う。Pub/Subパターンにつながる。&lt;/p&gt;

&lt;h1 id='29_jquery'&gt;2.9 カスタムイベントとjQueryプラグイン&lt;/h1&gt;

&lt;p&gt;本だとちょっと？ってなる箇所もあったので付け足して実例。&lt;br /&gt;まずは悪い例。&lt;/p&gt;

&lt;p&gt;HTML&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;JavaScript&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;上記だと、&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;すべてのli要素に対してクリックイベントのハンドラを設定している 2. イベントハンドラの処理が長い&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;という問題があるのでこれをリファクタリングしたのが下記。&lt;br /&gt;※HTMLは変更しない&lt;/p&gt;

&lt;p&gt;JavaScript&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;大分見通しは良くなった。 これだと$(&amp;#8216;#tabs&amp;#8217;).trigger(&amp;#8216;change.tabs&amp;#8217;, &amp;#8216;groups&amp;#8217;)でプログラムの中からタブを切り替えたりも出来る。&lt;/p&gt;

&lt;h1 id='210_dom'&gt;2.10 非DOMイベント&lt;/h1&gt;

&lt;p&gt;きました。デザインパターン。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;パブリッシュ/サブスクライブはパブサブ（Pub/Sub）と呼ばれることもあり、パブリッシャーとサブスクライバーという2つの実体の間で行われるメッセージ交換をパターン化したものです。パブリッシャーは特定のチャンネルにメッセージをパブリッシュ（公開）し、そのチャンネルをサブスクライブ（購読）しているサブスクライバーは新規メッセージの公開時通知を受け取ります。ここでのポイントはパブリッシャーとサブスクライバーのプログラムが完全に分離しており、お互いの存在について関知する必要すらないという点です。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;上記コードをhashchangeでお馴染みのBen AlmanさんがjQueryライブラリとして公開してる。&lt;br /&gt;※記事ではbind、unbindだけどon、offにアップデートされてた。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='https://gist.github.com/661855' title='jQuery Tiny Pub/Sub: A really, really, REALLY tiny pub/sub implementation for jQuery. &amp;amp;mdash; Gist'&gt;jQuery Tiny Pub/Sub: A really, really, REALLY tiny pub/sub implementation for jQuery. &amp;#8212; Gist&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;使い方は下記。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;という訳でいよいよ次からMVC。&lt;/p&gt;</content>
	</entry>
	
	<entry>
		<id>http://fingaholic.github.com/posts/2012-06-27-stateful-javascript.html</id>
		<link type="text/html" rel="alternate" href="http://fingaholic.github.com/posts/2012-06-27-stateful-javascript.html"/>
		<title>ステートフルJavaScript 1章</title>
		<updated>2012-06-27T00:00:00+09:00</updated>
		<author>
			<name></name>
			<uri>http://fingaholic.github.com</uri>
		</author>
		<content type="html">&lt;h1 id='11_javascript'&gt;1.1 初期のJavaScript&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;JavaScriptが強力で動的なオブジェクト指向言語である&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;これって議論が分かれるところだけど書籍では&lt;strong&gt;オブジェクト指向言語&lt;/strong&gt;と言い切っている。&lt;/p&gt;

&lt;h1 id='12_'&gt;1.2 アプリケーションの構造化&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;大規模なjavaScriptアプリケーションを作成する上で鍵になるのは、「javaScriptの」アプリケーションをつくろうとはしないことです。まず、独立性の高いコンポーネントへとアプリケーションを分割するべきです。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;粒度が細かいほうが制作しやすいし管理もしやすいと。&lt;/p&gt;

&lt;h1 id='13_mvc'&gt;1.3 MVCとは&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;MVCはデザインパターンの1つであり、アプリケーションをデータ（Model）とプレゼンテーションレイヤ（View）そしてユーザーインタラクションレイヤ（Controller）の3つに分割するという概念です。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;大抵のWEBアプリケーションはこう分割できるよねと。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;1. ユーザーがアプリケーションを操作します。&lt;br /&gt;2. コントローラが持つイベントハンドラが呼び出されます。&lt;br /&gt;3. コントローラがモデルに対してデータを要求し、受け取ったデータをビューに渡します。&lt;br /&gt;4. ビューがデータを表示します。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;図にすると下記のリンク先の用な感じ？&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://f.hatena.ne.jp/kazuk_i/20110407073430' title='f:id:kazuk_i:20110407073430p:image'&gt;f:id:kazuk_i:20110407073430p:image&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='131_'&gt;1.3.1 モデル&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;モデルとは、アプリケーションのデータオブジェクトが格納される場所を意味します。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;TwitterからTweet引っ張ってきてゴニョゴニョって場合だとTweetデータって感じか。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;モデルはビューやコントローラについて全く関知しません。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;いわゆる疎結合ってやつですね。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;上記はダメな例。&lt;br /&gt;destroyUserが名前空間で保護されていない（グローバル関数になっている）ので、&lt;br /&gt;同じ名前の関数があったら競合してしまう。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;上記は良い例。&lt;br /&gt;destroy関数はUserインスタンスを通じて名前空間が限定されている。&lt;br /&gt;また、継承できるので全てのモデルで関数を定義する必要もない。&lt;/p&gt;

&lt;h2 id='132_'&gt;1.3.2 ビュー&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;ビューのレイヤはユーザーへの表示に相当し、ユーザーはこれに対してインタラクションを行います。&lt;br /&gt;JavaScriptアプリケーションでのビューは大部分がHTMLとCSSそしてJavaScriptテンプレートによって構成されます。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ビューもモデルと同様他の部分から切り離されているべきだと。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;上記はダメな例。&lt;br /&gt;formatDate関数をビューの中に記述しているので保守が困難。&lt;/p&gt;

&lt;p&gt;javascript&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;html&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;上記は良い例。 helperという名前空間で保護されているし、ロジックを外部に隔離出来ている。&lt;/p&gt;

&lt;h2 id='133_'&gt;1.3.3 コントローラ&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;モデルとビューを結びつける役割を果たしているのがコントローラです。コントローラはビューからイベントや入力データを受け取り、これらを処理（モデルが呼び出されることもあります）し、その結果に基づいてビューを更新します。ページの読み込み時に、コントローラはビューに対してイベントハンドラを追加します。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;仲介するだけでやっぱりコントローラも分離してる。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;これちょっと分からんかった。匿名関数いるのかな？jQuery用？nameClickって匿名関数無くてもプライベートになってる気がするけど。&lt;/p&gt;

&lt;h1 id='14_'&gt;1.4 モジュール性のためのクラス設計&lt;/h1&gt;

&lt;p&gt;JavaScriptのクラスやイベント等の基本的な概念をおさらい。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;慣習的にコンストラクタ関数の先頭は大文字に、必ずnew演算子と組み合わせて呼び出す。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;上記は新しいクラスをセットアップするための関数。&lt;br /&gt;今後これをペースにクラスライブラリを作るみたい。&lt;/p&gt;

&lt;h1 id='15_'&gt;1.5 クラスへの関数の追加&lt;/h1&gt;

&lt;h2 id='id31'&gt;クラス関数&lt;/h2&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;h2 id='id32'&gt;インスタンス関数&lt;/h2&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;h2 id='prototype'&gt;prototypeのエイリアスを使う&lt;/h2&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;h1 id='16_'&gt;1.6 クラスライブラリへのメソッドの追加&lt;/h1&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;クラスライブラリにクラスプロパティを追加するextend関数と、&lt;br /&gt;インスタンスプロパティを追加するinclude関数を追加。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;上記がextend関数の使用例。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;上記がinclude関数の使用例。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;上記がコールバック（拡張が行われた時点で呼ばれる）の使用例。&lt;/p&gt;

&lt;h1 id='17_'&gt;1.7 プロトタイプを使ったクラスの継承&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;JavaScriptはプロトタイプベースの言語であり、（クラスとインスタンスを区別するのではなく）プロトタイプすなわち原型というオブジェクトの概念を持ちます。プロトタイプオブジェクトとは、新しく生成されるオブジェクトに対して初期プロパティを与えるテンプレートのような役割を果たします。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;h1 id='18_'&gt;1.8 クラスライブラリに継承を追加する&lt;/h1&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;ちなみに__proto__にブラウザ間の互換性が無いので注意。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;h1 id='19_'&gt;1.9 関数呼び出し&lt;/h1&gt;

&lt;h2 id='apply'&gt;apply関数&lt;/h2&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;h2 id='call'&gt;call関数&lt;/h2&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;h2 id='jqueryproxy'&gt;元のコンテキストを保持する関数（jQueryなら$.proxy()）&lt;/h2&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;この辺りは下記参考リンクが分かりやすい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://ginpen.com/2011/12/15/apply/' title='Ginpen.com | 他人の能力を自分のものにできる .apply()で高度な成り済ましを'&gt;Ginpen.com | 他人の能力を自分のものにできる .apply()で高度な成り済ましを&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id='110_'&gt;1.10 有効範囲を制限する&lt;/h1&gt;

&lt;p&gt;クラスライブラリにproxy関数を追加。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;下記使用例。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;ちなみにES5ならbindが使える。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;古いブラウザ用のbindフォールバック&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;下記参考リンク。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/bind' title='bind - MDN'&gt;bind - MDN&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='https://github.com/kriskowal/es5-shim/' title='kriskowal/es5-shim ・ GitHub'&gt;kriskowal/es5-shim ・ GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id='111_'&gt;1.11 プライベート関数の追加&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;多くの開発者が、プライベートなプロパティには名前の先頭にアンダースコア（_）を付けるという対策だけで済ませてしまっています。今後状況は変わるかもしれませんが、アンダースコアによってそのプロパティがプライベートなAPIの一部であることが表明されてます。しかしこのアプローチは醜悪であり、筆者はこれを利用するつもりはありません。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ちょっとしたサイトなら工数の都合もあるからいいと思うけどWEBアプリではご法度。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;上記ではfindById関数がプライベートになっている。&lt;/p&gt;

&lt;h1 id='112_'&gt;1.12 その他のクラスライブラリ&lt;/h1&gt;

&lt;p&gt;Spineってクラスライブラリもあるんすか。&lt;/p&gt;

&lt;h1 id='1'&gt;1章で制作したクラスライブラリ&lt;/h1&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;</content>
	</entry>
	
	<entry>
		<id>http://fingaholic.github.com/posts/2012-05-11-develop.html</id>
		<link type="text/html" rel="alternate" href="http://fingaholic.github.com/posts/2012-05-11-develop.html"/>
		<title>ローカルでの開発環境</title>
		<updated>2012-05-11T00:00:00+09:00</updated>
		<author>
			<name></name>
			<uri>http://fingaholic.github.com</uri>
		</author>
		<content type="html">&lt;p&gt;今までは会社と自宅でそれぞれローカルサーバー用のディレクトリを用意しておいてそこに作業ファイルを放り込んでからMAMPなりXAMPPでサーバー作って確認してたけどなんか面倒くさくなってきたのが発端。しかもGit使ってバージョン管理し始めたりgrunt使い出したから色々納品時に不要なファイルも混在してくるのでなんかいい方法がないか模索してるとこと。&lt;/p&gt;

&lt;h1 id='id29'&gt;ディレクトリ構造&lt;/h1&gt;

&lt;p&gt;gruntでSass使いつつGitでバージョン管理する場合、とりあえずhtdocs以下に下記のように展開することにした。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;h1 id='rakefile'&gt;Rakefileの内容&lt;/h1&gt;

&lt;p&gt;作業に必要そうなものをポツポツ追加していってる。&lt;br /&gt;ruby分からんから適当だけどまあ動けばいいやと思ってる。&lt;br /&gt;上からgruntの監視用、ローカルサーバー用（http://localhost:8000/で確認出来る）、納品ファイル生成用のコマンド。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;h1 id='id30'&gt;納品ファイルの生成&lt;/h1&gt;

&lt;p&gt;上記のRakeコマンド、&lt;code class='inline'&gt;rake generate&lt;/code&gt;を叩くと下記ファイルがdevelopmentと同階層に生成される。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;これで完成。 ちょこちょこ追加していこう。&lt;/p&gt;</content>
	</entry>
	
	<entry>
		<id>http://fingaholic.github.com/posts/2012-05-10-language.html</id>
		<link type="text/html" rel="alternate" href="http://fingaholic.github.com/posts/2012-05-10-language.html"/>
		<title>多言語サイトを作る際のフロント側での注意点</title>
		<updated>2012-05-10T00:00:00+09:00</updated>
		<author>
			<name></name>
			<uri>http://fingaholic.github.com</uri>
		</author>
		<content type="html">&lt;h1 id='id27'&gt;使用する言語の言語コードを明示する&lt;/h1&gt;

&lt;p&gt;HTML5、XHTMLに関わらず大体普段使用しているhtmlタグのlang属性は「ja」だと思う。まずはコレを使用する言語コードにする。英語なら「en」、ベトナム語なら「vi」。大体下記サイトに載ってると思う。&lt;/p&gt;

&lt;p&gt;&lt;a href='http://www.cybergarden.net/references/langcode/' title='言語コード一覧 | references | CYBER&amp;amp;#64;GARDEN'&gt;言語コード一覧 | references | CYBER&amp;#64;GARDEN&lt;/a&gt;&lt;/p&gt;

&lt;h1 id='utf8'&gt;文字コードは「utf-8」に&lt;/h1&gt;

&lt;p&gt;色々あるけど「utf-8」がデファクトスタンダードだと思う。&lt;/p&gt;

&lt;h1 id='id28'&gt;エディタの言語設定を変更する&lt;/h1&gt;

&lt;p&gt;使っているエディタによると思うけどこれも大体みんな日本語か英語だと思う。ただこのままだと中国語だったり韓国語だったりの2バイト言語（日本語もそうだけど）はコピペが出来ないのでエディタでこの辺りの設定を変えなきゃだめっぽい。ただVimでの変更方法が分からないのでちょっと保留。とりあえずDreamweaverではそのままコピペ出来た。&lt;/p&gt;

&lt;p&gt;ちなみに数値文字参照とか使えば言語の設定に関わらず表示は担保されるけど下記みたく日本語サイトの中のコンテンツとして他言語の文章を掲載するケース以外だとあんまり現実的じゃない。運用するのは現地の人だろうし何より手間がかかるし。とりあえずモックとかで確認出ししなきゃダメな時とかには数値文字参照でもいいかと。&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;ベトナム語&lt;/dt&gt;
&lt;dd class='snp-font-multilingual' lang='vi'&gt;SGTT.VN - Th&amp;#225;ng 7.2011, c&amp;#243; ba tr&amp;#7867; em &amp;#7903; D&amp;#259;k L&amp;#259;k v&amp;#236; &amp;#259;n qu&amp;#7843; r&amp;#7915;ng m&amp;#224; t&amp;#7917; vong. B&amp;#225;o ch&amp;#237; c&amp;#361;ng t&amp;#7915;ng th&amp;#244;ng tin c&amp;#243; du kh&amp;#225;ch l&amp;#234;n n&amp;#250;i kh&amp;#225;m ph&amp;#225; r&amp;#7915;ng nguy&amp;#234;n sinh &amp;#273;&amp;#227; th&amp;#7917; nh&amp;#7845;m nh&amp;#225;p tr&amp;#225;i m&amp;#227; ti&amp;#7873;n v&amp;#236; ng&amp;#7905; l&amp;#224; cam r&amp;#7915;ng d&amp;#7851;n &amp;#273;&amp;#7871;n ng&amp;#7897; &amp;#273;&amp;#7897;c su&amp;#253;t ch&amp;#7871;t.&lt;/dd&gt;
&lt;dt&gt;タミル語&lt;/dt&gt;
&lt;dd class='snp-font-multilingual' lang='ta-IN'&gt;&amp;#2986;&amp;#3009;&amp;#2980;&amp;#3009;&amp;#2975;&amp;#3007;&amp;#2994;&amp;#3021;&amp;#2994;&amp;#3007; : &amp;#2972;&amp;#2985;&amp;#2997;&amp;#2992;&amp;#3007; &amp;#2990;&amp;#3009;&amp;#2980;&amp;#2994;&amp;#3021; &amp;#2990;&amp;#3006;&amp;#2992;&amp;#3021;&amp;#2970;&amp;#3021; &amp;#2990;&amp;#3006;&amp;#2980;&amp;#2990;&amp;#3021; &amp;#2990;&amp;#3009;&amp;#2975;&amp;#3007;&amp;#2991; &amp;#2951;&amp;#2984;&amp;#3021;&amp;#2980;&amp;#3007;&amp;#2991;&amp;#3006;&amp;#2997;&amp;#3007;&amp;#2994;&amp;#3021; &amp;#2980;&amp;#3015;&amp;#2991;&amp;#3007;&amp;#2994;&amp;#3016; &amp;#2953;&amp;#2993;&amp;#3021;&amp;#2986;&amp;#2980;&amp;#3021;&amp;#2980;&amp;#3007; 13 &amp;#2970;&amp;#2980;&amp;#2997;&amp;#3008;&amp;#2980;&amp;#2990;&amp;#3021; &amp;#2970;&amp;#2992;&amp;#3007;&amp;#2997;&amp;#2975;&amp;#3016;&amp;#2984;&amp;#3021;&amp;#2980;&amp;#3009;&amp;#2995;&amp;#3021;&amp;#2995;&amp;#2980;&amp;#3009;. &amp;#2953;&amp;#2994;&amp;#2965;&amp;#2995;&amp;#2997;&amp;#3007;&amp;#2994;&amp;#3021; &amp;#2949;&amp;#2985;&amp;#3016;&amp;#2997;&amp;#2992;&amp;#3006;&amp;#2994;&amp;#3009;&amp;#2990;&amp;#3021; &amp;#2986;&amp;#2992;&amp;#3009;&amp;#2965;&amp;#2986;&amp;#3021;&amp;#2986;&amp;#2975;&amp;#3009;&amp;#2990;&amp;#3021; &amp;#2986;&amp;#3006;&amp;#2985;&amp;#2990;&amp;#3021; &amp;#2975;&amp;#3008;. &amp;#2953;&amp;#2994;&amp;#2965;&amp;#3007;&amp;#2994;&amp;#3021; &amp;#2949;&amp;#2980;&amp;#3007;&amp;#2965; &amp;#2980;&amp;#3015;&amp;#2991;&amp;#3007;&amp;#2994;&amp;#3016; &amp;#2953;&amp;#2993;&amp;#3021;&amp;#2986;&amp;#2980;&amp;#3021;&amp;#2980;&amp;#3007; &amp;#2970;&amp;#3014;&amp;#2991;&amp;#3021;&amp;#2991;&amp;#3009;&amp;#2990;&amp;#3021; &amp;#2984;&amp;#3006;&amp;#2975;&amp;#3009;&amp;#2965;&amp;#2995;&amp;#3007;&amp;#2994;&amp;#3021; &amp;#2951;&amp;#2984;&amp;#3021;&amp;#2980;&amp;#3007;&amp;#2991;&amp;#3006; &amp;#2951;&amp;#2992;&amp;#2979;&amp;#3021;&amp;#2975;&amp;#3006;&amp;#2990;&amp;#3021; &amp;#2951;&amp;#2975;&amp;#2980;&amp;#3021;&amp;#2980;&amp;#3007;&amp;#2994;&amp;#3021; &amp;#2951;&amp;#2992;&amp;#3009;&amp;#2965;&amp;#3021;&amp;#2965;&amp;#3007;&amp;#2993;&amp;#2980;&amp;#3009;. &amp;#2972;&amp;#2985;&amp;#2997;&amp;#2992;&amp;#3007; &amp;#2990;&amp;#3006;&amp;#2980;&amp;#2990;&amp;#3021; &amp;#2990;&amp;#3009;&amp;#2980;&amp;#2994;&amp;#3021; &amp;#2990;&amp;#3006;&amp;#2992;&amp;#3021;&amp;#2970;&amp;#3021; &amp;#2990;&amp;#3006;&amp;#2980;&amp;#2990;&amp;#3021; &amp;#2990;&amp;#3009;&amp;#2975;&amp;#3007;&amp;#2991; &amp;#2980;&amp;#3015;&amp;#2991;&amp;#3007;&amp;#2994;&amp;#3016; &amp;#2953;&amp;#2993;&amp;#3021;&amp;#2986;&amp;#2980;&amp;#3021;&amp;#2980;&amp;#3007;&amp;#2965;&amp;#3021;&amp;#2965;&amp;#3006;&amp;#2985; &amp;#2949;&amp;#2995;&amp;#2997;&amp;#3008;&amp;#2975;&amp;#3021;&amp;#2975;&amp;#3016; &amp;#2980;&amp;#3015;&amp;#2991;&amp;#3007;&amp;#2994;&amp;#3016; &amp;#2950;&amp;#2979;&amp;#3016;&amp;#2991;&amp;#2990;&amp;#3021; &amp;#2997;&amp;#3014;&amp;#2995;&amp;#3007;&amp;#2991;&amp;#3007;&amp;#2975;&amp;#3021;&amp;#2975;&amp;#3009; &amp;#2951;&amp;#2992;&amp;#3009;&amp;#2965;&amp;#3021;&amp;#2965;&amp;#3007;&amp;#2993;&amp;#2980;&amp;#3009;. &amp;#2949;&amp;#2980;&amp;#2985;&amp;#3021;&amp;#2986;&amp;#2975;&amp;#3007; &amp;#2972;&amp;#2985;&amp;#2997;&amp;#2992;&amp;#3007; &amp;#2990;&amp;#3006;&amp;#2980;&amp;#2980;&amp;#3021;&amp;#2980;&amp;#3007;&amp;#2994;&amp;#3021; 18.69 &amp;#2990;&amp;#3007;&amp;#2994;&amp;#3021;&amp;#2994;&amp;#3007;&amp;#2991;&amp;#2985;&amp;#3021; &amp;#2965;&amp;#3007;&amp;#2994;&amp;#3019;&amp;#2997;&amp;#3009;&amp;#2990;&amp;#3021;, &amp;#2986;&amp;#3007;&amp;#2986;&amp;#3021;&amp;#2992;&amp;#2997;&amp;#2992;&amp;#3007; &amp;#2990;&amp;#3006;&amp;#2980;&amp;#2980;&amp;#3021;&amp;#2980;&amp;#3007;&amp;#2994;&amp;#3021; 16&amp;#2990;&amp;#3007;&amp;#2994;&amp;#3021;&amp;#2994;&amp;#3007;&amp;#2991;&amp;#2985;&amp;#3021; &amp;#2965;&amp;#3007;&amp;#2994;&amp;#3019;&amp;#2997;&amp;#3009;&amp;#2990;&amp;#3021;, &amp;#2990;&amp;#3006;&amp;#2992;&amp;#3021;&amp;#2970;&amp;#3021; &amp;#2990;&amp;#3006;&amp;#2980;&amp;#2980;&amp;#3021;&amp;#2980;&amp;#3007;&amp;#2994;&amp;#3021; 47.60 &amp;#2990;&amp;#3007;&amp;#2994;&amp;#3021;&amp;#2994;&amp;#3007;&amp;#2991;&amp;#2985;&amp;#3021; &amp;#2965;&amp;#3007;&amp;#2994;&amp;#3019;&amp;#2997;&amp;#3009;&amp;#2990;&amp;#3021; &amp;#2953;&amp;#2993;&amp;#3021;&amp;#2986;&amp;#2980;&amp;#3021;&amp;#2980;&amp;#3007; &amp;#2970;&amp;#3014;&amp;#2991;&amp;#3021;&amp;#2980;&amp;#3009; &amp;#2951;&amp;#2992;&amp;#3009;&amp;#2965;&amp;#3021;&amp;#2965;&amp;#3007;&amp;#2993;&amp;#2980;&amp;#3009;. &amp;#2965;&amp;#2975;&amp;#2984;&amp;#3021;&amp;#2980; 3 &amp;#2990;&amp;#3006;&amp;#2980;&amp;#2969;&amp;#3021;&amp;#2965;&amp;#2995;&amp;#3007;&amp;#2994;&amp;#3021; &amp;#2951;&amp;#2984;&amp;#3021;&amp;#2980;&amp;#3007;&amp;#2991;&amp;#3006;&amp;#2997;&amp;#3007;&amp;#2994;&amp;#3021; &amp;#2990;&amp;#3018;&amp;#2980;&amp;#3021;&amp;#2980;&amp;#2990;&amp;#3021; &amp;#2953;&amp;#2993;&amp;#3021;&amp;#2986;&amp;#2980;&amp;#3021;&amp;#2980;&amp;#3007; &amp;#2970;&amp;#3014;&amp;#2991;&amp;#3021;&amp;#2991;&amp;#2986;&amp;#3021;&amp;#2986;&amp;#2975;&amp;#3021;&amp;#2975; &amp;#2980;&amp;#3015;&amp;#2991;&amp;#3007;&amp;#2994;&amp;#3016; 82.29 &amp;#2990;&amp;#3007;&amp;#2994;&amp;#3021;&amp;#2994;&amp;#3007;&amp;#2991;&amp;#2985;&amp;#3021; &amp;#2965;&amp;#3007;&amp;#2994;&amp;#3019;&amp;#2997;&amp;#3006;&amp;#2965;&amp;#3009;&amp;#2990;&amp;#3021;. &amp;#2965;&amp;#2975;&amp;#2984;&amp;#3021;&amp;#2980; &amp;#2950;&amp;#2979;&amp;#3021;&amp;#2975;&amp;#3019;&amp;#2975;&amp;#3009; &amp;#2962;&amp;#2986;&amp;#3021;&amp;#2986;&amp;#3007;&amp;#2975;&amp;#3009;&amp;#2965;&amp;#3016;&amp;#2991;&amp;#3007;&amp;#2994;&amp;#3021; &amp;#2951;&amp;#2980;&amp;#3009; 13 &amp;#2970;&amp;#2980;&amp;#2997;&amp;#3008;&amp;#2980;&amp;#2990;&amp;#3021; &amp;#2970;&amp;#2992;&amp;#3007;&amp;#2997;&amp;#3006;&amp;#2965;&amp;#3009;&amp;#2990;&amp;#3021;. &amp;#2965;&amp;#2975;&amp;#2984;&amp;#3021;&amp;#2980; &amp;#2950;&amp;#2979;&amp;#3021;&amp;#2975;&amp;#3009; &amp;#2951;&amp;#2980;&amp;#3015; &amp;#2965;&amp;#3006;&amp;#2994;&amp;#2965;&amp;#2975;&amp;#3021;&amp;#2975;&amp;#2980;&amp;#3021;&amp;#2980;&amp;#3007;&amp;#2994;&amp;#3021; 94.39 &amp;#2990;&amp;#3007;&amp;#2994;&amp;#3021;&amp;#2994;&amp;#3007;&amp;#2991;&amp;#2985;&amp;#3021; &amp;#2965;&amp;#3007;&amp;#2994;&amp;#3019; &amp;#2980;&amp;#3015;&amp;#2991;&amp;#3007;&amp;#2994;&amp;#3016; &amp;#2953;&amp;#2993;&amp;#3021;&amp;#2986;&amp;#2980;&amp;#3021;&amp;#2980;&amp;#3007; &amp;#2970;&amp;#3014;&amp;#2991;&amp;#3021;&amp;#2980;&amp;#3007;&amp;#2992;&amp;#3009;&amp;#2984;&amp;#3021;&amp;#2980;&amp;#2980;&amp;#3009;.&lt;/dd&gt;
&lt;/dl&gt;
&lt;h1 id='fontfamily'&gt;「font-family」の設定&lt;/h1&gt;

&lt;p&gt;これも適切に設定してやらないとIEで文字化けする。今回ベトナム語がネックなので調べてると下記ページに載ってた。これも調べるともっと色んなフォントがありそうな気もするけど無難なのが一番良さ気。&lt;/p&gt;

&lt;p&gt;&lt;a href='http://yama-masa.com/wp/archives/6' title='ベトナム語用フォント | phew! phew! phew!'&gt;ベトナム語用フォント | phew! phew! phew!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wordpressとかだと多言語サイト用のプラグインとかあるっぽいけどバックグラウンドに強い人が居るのは必須だと思う。&lt;/p&gt;</content>
	</entry>
	
	<entry>
		<id>http://fingaholic.github.com/posts/2012-05-02-grunt.html</id>
		<link type="text/html" rel="alternate" href="http://fingaholic.github.com/posts/2012-05-02-grunt.html"/>
		<title>gruntをインストールする - Mac OSX Lion</title>
		<updated>2012-05-02T00:00:00+09:00</updated>
		<author>
			<name></name>
			<uri>http://fingaholic.github.com</uri>
		</author>
		<content type="html">&lt;p&gt;手順としてはWindowsと同じだと思う。&lt;br /&gt;思うというのはまずったからです。&lt;/p&gt;

&lt;h1 id='nodejsnpm'&gt;node.jsとnpmをインストール&lt;/h1&gt;

&lt;p&gt;ここでまずった。&lt;a href='http://nodejs.org/dist/' title='Node.js release files list'&gt;公式&lt;/a&gt;だと最新のインストーラは&lt;strong&gt;node-v0.6.16.pkg&lt;/strong&gt;なのになぜかどっから拾ってきたか分からないけど&lt;strong&gt;node-v0.7.7.pkg&lt;/strong&gt;を落としてインストールしてしまっていた。この時はまだそれに気づかず進めており、パッケージ版はWindowsと同様npmもインストールされたのでいざ&lt;code class='inline'&gt;npm install -g grunt&lt;/code&gt;してもエラーでインストール出来ない。調べてみるとgruntはどうも0.7.7では動作しないのでアンインストールして入れ直そうとしたけどパッケージ版のアンインストール情報が殆ど無い。npmを&lt;code class='inline'&gt;sudo npm uninstall npm -g&lt;/code&gt;でアンインストールしてから&lt;code class='inline'&gt;cd ~/node&lt;/code&gt;で&lt;code class='inline'&gt;sudo make uninstall&lt;/code&gt;って記事が多数だったけ~/nodeってどこにも見当たらないし。&lt;br /&gt;泣きながら小一時間ググッてたらなんとかデグレする方法が載ってたので試したらいけた。感謝。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://www.websector.de/blog/2011/12/15/quick-tip-node-how-to-downgrade-node-js-on-os-x/' title='WS-Blog - Quick Tip (Node): How to downgrade Node.js on OS X'&gt;WS-Blog - Quick Tip (Node): How to downgrade Node.js on OS X&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一応適当な日本語訳も。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Terminalを開く。&lt;/li&gt;

&lt;li&gt;現在インストールしているnode.jsのバージョンを調べる。&lt;/li&gt;

&lt;li&gt;&lt;a href='http://nodejs.org/dist/' title='Node.js release files list'&gt;ここ&lt;/a&gt;から上記で調べた&lt;strong&gt;現在使用しているバージョン&lt;/strong&gt;のtar.gzファイルをダウンロードする。&lt;/li&gt;

&lt;li&gt;tar.gzを解凍、展開する。&lt;/li&gt;

&lt;li&gt;現在のバージョンをインストーラーを使ってインストールしていない場合はこの項目はスキップできる。そうでない人は展開したファイル内に移動して&lt;code class='inline'&gt;./configure&lt;/code&gt;、&lt;code class='inline'&gt;make&lt;/code&gt;、&lt;code class='inline'&gt;sudo make install&lt;/code&gt;の順にコマンドを打つ。&lt;/li&gt;

&lt;li&gt;インストール（実質上書き）出来たらmakeコマンドでアンインストール出来るので&lt;code class='inline'&gt;sudo make install&lt;/code&gt;でアンインストールする。&lt;/li&gt;

&lt;li&gt;再び&lt;a href='http://nodejs.org/dist/' title='Node.js release files list'&gt;ここ&lt;/a&gt;から&lt;strong&gt;インストールしたいバージョン&lt;/strong&gt;のtaz.gzをダウンロードする。&lt;/li&gt;

&lt;li&gt;tar.gzを解凍、展開する。&lt;/li&gt;

&lt;li&gt;先程と同じ手順で展開したファイルに移動して&lt;code class='inline'&gt;./configure&lt;/code&gt;、&lt;code class='inline'&gt;make&lt;/code&gt;、&lt;code class='inline'&gt;sudo make install&lt;/code&gt;の順にコマンドを打つ。&lt;/li&gt;

&lt;li&gt;無事インストール出来たかを&lt;code class='inline'&gt;node --version&lt;/code&gt;で確認して終了。&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id='grunt'&gt;gruntをインストール&lt;/h1&gt;

&lt;p&gt;あとはWindowsといっしょ。場合によっては管理者権限でインストールする必要がある（sqwishも同様）けど。下記からどうぞ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='/posts/2012-05-01-grunt.html' title='gruntをインストールする（Windows Vista）'&gt;gruntをインストールする（Windows Vista）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
	</entry>
	
	<entry>
		<id>http://fingaholic.github.com/posts/2012-05-01-grunt.html</id>
		<link type="text/html" rel="alternate" href="http://fingaholic.github.com/posts/2012-05-01-grunt.html"/>
		<title>gruntをインストールする - Windows Vista</title>
		<updated>2012-05-01T00:00:00+09:00</updated>
		<author>
			<name></name>
			<uri>http://fingaholic.github.com</uri>
		</author>
		<content type="html">&lt;p&gt;&lt;strong&gt;ちなみにMacも下記とほとんど相違ないけど&lt;a href='/posts/2012-05-02-grunt.html' title='gruntをインストールする（Mac OSX Lion）'&gt;ハマった&lt;/a&gt;んで一応メモってる&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;gruntそのものはtakazudoさんの&lt;a href='http://hamalog.tumblr.com/post/18137176043/grunt-js-css' title='gruntで快適JS/CSSビルド生活 - hamalog'&gt;hamalog&lt;/a&gt;で知ってたけどなかなかどういう場面で必要になるか分からなかったので手を付けれなかったけど、実現したい事の解決方法としてマッチしたので参考にさせてもらいながらgruntをインストールしてみた。&lt;/p&gt;

&lt;h1 id='nodejsnpm'&gt;node.jsとnpmをインストール&lt;/h1&gt;

&lt;p&gt;ネットの情報ではnpmをWindowsで使うには結構手法が違ってたりしてたけど&lt;a href='http://www.koikikukan.com/archives/2012/01/10-015555.php' title='Windowsを使ってNode.js+Socket.IOを試してみました。'&gt;小粋空間&lt;/a&gt;さんによると&lt;a href='http://nodejs.org/#download' title='node.js'&gt;公式のパッケージ&lt;/a&gt;をインストールすればデフォで入ってるっぽい。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;「npm」という、Node.js用のパッケージマネージャも一緒にインストールされており（ネットで調べると以前は別にインストールする必要があったようですが不要）、同じフォルダにある「npm.cmd」が該当します。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ちなみにコマンドプロンプトで&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;としても起動しなかったので環境変数のPathに「C:\Users\ユーザー名\AppData\Roaming\npm;C:\Program Files\nodejs\」を追加すると無事起動できた。&lt;/p&gt;

&lt;h1 id='grunt'&gt;gruntをインストール&lt;/h1&gt;

&lt;p&gt;コマンドプロンプトで、&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;とするだけ。楽チン。&lt;/p&gt;

&lt;h1 id='grunt'&gt;gruntを使う。&lt;/h1&gt;

&lt;p&gt;公式サイトを見ながらやってみた。どうやらプロジェクトとなるディレクトリ直下にgrunt.jsを設置してそこ色々設定を書いていくらしい。&lt;code class='inline'&gt;grunt init:gruntfile&lt;/code&gt;で生成出来るけどイミフな設定が多々あったので自分で作ってみるのがいいかも。ちなみにラッパー関数内に設定を記述していく。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;※ちなみに以後のコードは上記ラッパーを省略して書くが必ず必要なので注意。&lt;/strong&gt;&lt;br /&gt;&lt;strong&gt;※CSSプログラマーの神様に&lt;a href='https://twitter.com/GeckoTang/status/233840285820518400' title='指摘'&gt;指摘&lt;/a&gt;された箇所を修正&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id='js'&gt;jsを結合してみる&lt;/h1&gt;

&lt;p&gt;concatなるビルトインタスクがあるので&lt;a href='https://github.com/cowboy/grunt/blob/master/docs/task_concat.md' title='grunt/docs/task_concat.md at master ・ cowboy/grunt'&gt;公式&lt;/a&gt;見ながらやってみる。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;早速コマンドラインで下記を叩いてみる。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;おお、吐き出されている！今まではmodernizr.load使ってたけどこれからはリソース削減のためにこれでいってみよう。&lt;/p&gt;

&lt;h1 id='jsminify'&gt;jsをminifyする&lt;/h1&gt;

&lt;p&gt;結合出来ればあとはminifyもしたい。これもminなるビルトインタスクがあるので&lt;a href='https://github.com/cowboy/grunt/blob/master/docs/task_min.md' title='grunt/docs/task_min.md at master ・ cowboy/grunt'&gt;公式&lt;/a&gt;見ながらやってみる。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;で、例のごとく下記を叩く。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;13348bytesから7383bytes&lt;/strong&gt;まで圧縮出来た。&lt;/p&gt;

&lt;h1 id='sass'&gt;sassも監視してみる&lt;/h1&gt;

&lt;p&gt;これなかなか検索しても出て来なかったけどtakazudoさんの&lt;a href='https://github.com/Takazudo/takazudo.github.com/blob/master/_blogsrc/grunt.js' title='takazudo.github.com/_blogsrc/grunt.js at master ・ Takazudo/takazudo.github.com'&gt;github&lt;/a&gt;を見ながらやってみた。どうやら自分で&lt;a href='https://github.com/cowboy/grunt/blob/master/docs/types_of_tasks.md#custom-tasks' title='grunt/docs/types_of_tasks.md at master ・ cowboy/grunt'&gt;カスタムタスク&lt;/a&gt;を作って登録すればよさそう。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;で、肝心のタスクはsass.jsとしてtasksディレクトリ以下に格納。ほとんど&lt;a href='https://github.com/Takazudo/takazudo.github.com/blob/master/_blogsrc/tasks/sass.js' title='takazudo.github.com/_blogsrc/tasks/sass.js at master ・ Takazudo/takazudo.github.com'&gt;takazudoさんの&lt;/a&gt;を&lt;del&gt;パク&lt;/del&gt;参考にさせてもらいました。下記がtasks/sass.js内の記述。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;いざコマンドを叩いてみる。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;キタコレ。無事変換できてた。&lt;/p&gt;

&lt;h1 id='css'&gt;cssを圧縮する&lt;/h1&gt;

&lt;p&gt;圧縮はsassコマンドに&amp;#8211;styleオプションを付けても良かったけどjsのように別途設けた方がよさそうなのでこれまた&lt;a href='https://github.com/Takazudo/takazudo.github.com/blob/master/_blogsrc/tasks/cssmin.js' title='takazudo.github.com/_blogsrc/tasks/cssmin.js at master ・ Takazudo/takazudo.github.com'&gt;takazudoさんの&lt;/a&gt;を&lt;del&gt;パク&lt;/del&gt;参考にさせてもらいました。ちなみにNodeベースのCSSコンプレッサーである&lt;a href='https://github.com/ded/sqwish' title='ded/sqwish'&gt;sqwish&lt;/a&gt;なるものが必要なのでインストールしておく。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;インストール出来れば早速設定に。sassとほとんど一緒。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;tasks/cssmin.js内は下記。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;いざコマンドを叩いてみる。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;h1 id='id26'&gt;デフォルトタスクの登録&lt;/h1&gt;

&lt;p&gt;その他のビルドツールのように&lt;code class='inline'&gt;grunt&lt;/code&gt;とコマンドするだけで実行されるdefaultタスクを設定しておくには下記のようにする。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;h1 id='watch'&gt;全体の変更をwatchで監視&lt;/h1&gt;

&lt;p&gt;watchなるビルトインタスクがある。あんまり詳しい解説はなかったけどfilesに監視したいファイル、tasksにタスクを指定するっぽい。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;下記で実行出来る。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;とりあえず今はまだこれくらいしか分からないけどそれでも十分使えそう。&lt;br /&gt;Windows、Mac共に動作するのがとてもいい。&lt;br /&gt;これからは案件ベースで作業する時のディレクトリルールとか決めていきたい。&lt;/p&gt;</content>
	</entry>
	
	<entry>
		<id>http://fingaholic.github.com/posts/2012-04-30-python.html</id>
		<link type="text/html" rel="alternate" href="http://fingaholic.github.com/posts/2012-04-30-python.html"/>
		<title>Pythonのバージョン切り替えでハマった</title>
		<updated>2012-04-30T00:00:00+09:00</updated>
		<author>
			<name></name>
			<uri>http://fingaholic.github.com</uri>
		</author>
		<content type="html">&lt;h1 id='id25'&gt;まずは現在のバージョンを確認する&lt;/h1&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;h1 id='27python_select'&gt;たしか2.7がインストールされていたのでpython_selectで切り替える&lt;/h1&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;あれ？ググっても記事は古いけど上記のようにして切り替えてるのに。とりあえず「python_select command not found」でググると簡単に解決方法が見つかった。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://d.hatena.ne.jp/inouetakuya/20110728/1311852834' title='python_selectは死んだ - 彼女からは、おいちゃんと呼ばれています'&gt;python_selectは死んだ - 彼女からは、おいちゃんと呼ばれています&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;どうやら&lt;code class='inline'&gt;port select&lt;/code&gt;で切り替えるらしい。ってかそういう風に切り替えてたけどサッパリ忘れてる。&lt;/p&gt;

&lt;h1 id='python'&gt;使用可能なPythonのバージョンを確認する&lt;/h1&gt;

&lt;p&gt;上記の参考サイトのまんま打ってみる。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;h1 id='port_select'&gt;「port select」で切り替える&lt;/h1&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;ターミナルの再起動後にバージョンを改めて確認すると、&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;切り替えれたー！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;さすが&lt;a href='http://d.hatena.ne.jp/inouetakuya/20120331/1333192327' title='h300'&gt;エロサイト&lt;/a&gt;作った人の解説だけに分かりやすいし痒いところまでケアする記事、助かりました。&lt;/p&gt;</content>
	</entry>
	
	<entry>
		<id>http://fingaholic.github.com/posts/2012-04-29-likebutton.html</id>
		<link type="text/html" rel="alternate" href="http://fingaholic.github.com/posts/2012-04-29-likebutton.html"/>
		<title>mixi、twitter、FacebookのLikeボタンを設置する</title>
		<updated>2012-04-29T00:00:00+09:00</updated>
		<author>
			<name></name>
			<uri>http://fingaholic.github.com</uri>
		</author>
		<content type="html">&lt;p&gt;&lt;strong&gt;下記コードはHTML5のコード内に埋め込む事が前提で、IE7以上での表示を想定しており、FacebookのLikeボタンはIE6だと「Permission denied」エラーが出るので、IE6にも対応させたい場合はiframeにする必要がある。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href='/posts/2012-04-26-facebook.html' title='FacebookのLikeボタンを設置する'&gt;前回の記事&lt;/a&gt;でHTMLからscript要素を分離したけど他のサービスのLikeボタン（といってもtwitterとmixiだけ）も分離してみた。ちなみに当ブログではmixiユーザーは恐らく見ないだろうから設置してない。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;ちなみにmixiに関しては下記ページにログインしてmixi Pluginから新規サービスを作成、対象となるページを登録してservice-keyを発行する必要がある。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://developer.mixi.co.jp/' title='mixi Developer Center'&gt;mixi Developer Center&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;Facebookに関してはロケールを明示的に示したかったので&lt;strong&gt;パスをen_USからja_JP&lt;/strong&gt;に変更した。&lt;br /&gt;また、appIdを発行している、する場合はinit時にappIdを渡す必要がある。&lt;/p&gt;

&lt;p&gt;動作サンプルは下記。&lt;/p&gt;
&lt;iframe allowfullscreen='allowfullscreen' frameborder='0' src='http://jsfiddle.net/FiNGAHOLiC/jNNE7/embedded/' style='width: 100%; height: 450px'&gt;sample&lt;/iframe&gt;
&lt;p&gt;ちなみに関係ないけどmarkdown記法の中にjsFiddleのiframe埋め込むとレンダリングがストップしたので調べてみると下記のようにiframeタグに適当な文字列を入れとくと解決した。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='https://github.com/mojombo/jekyll/issues/346' title='Issue #346: Inserting an iframe causes page rendering to be partial ・ mojombo/jekyll'&gt;Issue #346: Inserting an iframe causes page rendering to be partial ・ mojombo/jekyll&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
	</entry>
	
	<entry>
		<id>http://fingaholic.github.com/posts/2012-04-26-facebook.html</id>
		<link type="text/html" rel="alternate" href="http://fingaholic.github.com/posts/2012-04-26-facebook.html"/>
		<title>FacebookのLikeボタンを設置する</title>
		<updated>2012-04-26T00:00:00+09:00</updated>
		<author>
			<name></name>
			<uri>http://fingaholic.github.com</uri>
		</author>
		<content type="html">&lt;p&gt;&lt;strong&gt;下記でもいいけどjQuery使ってるなら&lt;a href='/posts/2012-04-29-likebutton.html' title='mixi、twitter、facebookのLikeボタンを設置する'&gt;最新記事の方法&lt;/a&gt;のがいいかも。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;また、下記コードはHTML5のコード内に埋め込む事が前提で、IE7以上での表示を想定しており、FacebookのLikeボタンはIE6だと「Permission denied」エラーが出るので、IE6にも対応させたい場合はiframeにする必要がある。&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id='id20'&gt;まずは公式サイトへ&lt;/h1&gt;

&lt;p&gt;下記よりお好みのボタンを生成出来る。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='https://developers.facebook.com/docs/reference/plugins/like/' title='Like Button - Facebook Developers'&gt;Like Button - Facebook Developers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;「URL to Like」は設置されたページのURLを取って欲しいから空にした。&lt;/li&gt;

&lt;li&gt;「Send Button (XFBML Only)」不要なのでチェックを外した。&lt;/li&gt;

&lt;li&gt;「Layout Style」は「standard」を選択。&lt;/li&gt;

&lt;li&gt;「Width」はとりあえずデフォルト値の「450」のまま。&lt;/li&gt;

&lt;li&gt;「Show Faces」は不要なのでチェックを外した。&lt;/li&gt;

&lt;li&gt;「Verb to display」は「like」を選択。&lt;/li&gt;

&lt;li&gt;「Color Scheme」は「light」。&lt;/li&gt;

&lt;li&gt;「Font」は「lucida grande」。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;するとプラグインコード、HTML5、XFBML、IFRAMEの3種類からプラグインコードを選択できるので今回はHTML5を選択した。&lt;/p&gt;

&lt;h1 id='id21'&gt;実際に設置する&lt;/h1&gt;

&lt;h2 id='javascript_sdk'&gt;JavaScript SDKの読み込み&lt;/h2&gt;

&lt;p&gt;一度だけjavaScript SDK（Facebook APIを利用するためのJavaScript）をbodyタグの直後に挿入して読み込む。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;h2 id='id22'&gt;ボタンのコードを設置&lt;/h2&gt;

&lt;p&gt;次のコードをボタンを設置したい場所に設置する。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;とまあこれだけで設置自体は簡単に出来る。&lt;br /&gt;ただHTMLの中にscriptタグがあるのも気持ち悪いんでこれをまずはどうにかしたい。&lt;/p&gt;

&lt;h1 id='scriptjs'&gt;scriptタグを外部jsに移動する&lt;/h1&gt;

&lt;p&gt;どうやらid付きのscriptタグを吐き出しているだけなのでDOMContentLoaded（onload後でもまあ可）後に実行すれば問題なさげ。外部jsには下記の様に設置した。それなりの設定をしてたら即時関数にする必要もないけど見やすいからこのまま。&lt;strong&gt;ちなみにdiv#fb-rootはSDKで使用するのでbodyタグ直下に残しておくこと。仮に該当要素がない場合は自動で挿入されるので問題はないけど。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;h1 id='ogp'&gt;OGPの設定をする&lt;/h1&gt;

&lt;p&gt;忘れがち。基本的には下記を参考にしながら設定しておくとスムーズ。&lt;br /&gt;&lt;strong&gt;ちなみにアプリIDを取得しなくても（fb:app_idじゃなく）ページを管理するFacebookユーザーID（fb:admins）でもいいらしい。その場合は上記jsコードのアプリ部分のクエリは要らないかも（未確認）。&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://www.html5-memo.com/facebook/iine111216/' title='facebook いいねボタンの仕様変更?OGPの設定についてまとめました'&gt;facebook いいねボタンの仕様変更?OGPの設定についてまとめました&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='http://www.misclog.com/socialmedia/98/' title='サイトにFacebookのいいねボタンとOGPを導入してみる'&gt;サイトにFacebookのいいねボタンとOGPを導入してみる&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id='id23'&gt;クリック時のポップアップを消したい。&lt;/h1&gt;

&lt;p&gt;こいつが邪魔なので消したい。特にレイアウトによっては不要なケースも多々あると思う。&lt;br /&gt;単純にポップアップのセレクタにdisplay:none;してやれば消える（!importantは必須）。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;h1 id='id24'&gt;レスポンシブとかの場合に幅を変えたい&lt;/h1&gt;

&lt;p&gt;デフォルトの幅は450pxなのでブラウザの幅を縮めたりiPhoneで見ると横スクロールバーが出てうざい。ライクボタン自体の最小の幅っていうのはブラウザ間でまちまちなところもあったりボタンレイアウトによっても変わってくるのでこれは確認しながらちょこちょこ設定しなければならないのかも。とりあえずレスポンシブ時の最小幅は260pxくらいとこのブログでは設定してるので下記を設定しておいた。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;h1 id='ie'&gt;IEでブラウザを縮小すると横スクロールバーが出る&lt;/h1&gt;

&lt;p&gt;980pxのサイトとかならいいけどレスポンシブ対応とかしてると謎のスクロールバーが出る。&lt;br /&gt;調べてみるとどうやら先述したdiv#rootが原因っぽいのでこいつを非表示にした。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;ただ公式には下記のように推奨はされてないのでこの辺は自己責任でやったほうが良い。&lt;br /&gt;ってかそもそもIEでエラー出まくってるのに何を言ってるんだという感じだけども。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The fb-root element must not be hidden using display: none or visibility: hidden, or some parts of the SDK will not work properly in Internet Explorer.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='https://developers.facebook.com/docs/reference/javascript/' title='JavaScript SDK - Facebook'&gt;JavaScript SDK - Facebook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id='ie'&gt;IEでエラーが出まくる&lt;/h1&gt;

&lt;p&gt;今のとこちょっと原因は不明。調べてるとGoogle Analyticsとバッティングしてるとか色々出てきたのでもうちょっと調査してみる。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;iframeかXFBMLならIEでエラーが出ないっぽい。HTML5の埋め込みだとダメなのか？&lt;del&gt;ちなみにうちのブログはIE7以下はLikeボタン読み込まないようにした。&lt;/del&gt;&lt;/strong&gt;&lt;/p&gt;</content>
	</entry>
	
	<entry>
		<id>http://fingaholic.github.com/posts/2012-04-25-terminal.html</id>
		<link type="text/html" rel="alternate" href="http://fingaholic.github.com/posts/2012-04-25-terminal.html"/>
		<title>Terminalのコマンド</title>
		<updated>2012-04-25T00:00:00+09:00</updated>
		<author>
			<name></name>
			<uri>http://fingaholic.github.com</uri>
		</author>
		<content type="html">&lt;p&gt;書きだしてみると少ない。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;ちなみにcommand + Tでタブ開けるを知って今更ビビった。&lt;br /&gt;今までは走らせてるジョブを一旦停止しないと別の作業出来なかったけどこれで同時進行できるっぽい。&lt;/p&gt;

&lt;p&gt;参考サイト&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://www.k-tanaka.net/unix/' title='UNIXコマンド'&gt;UNIXコマンド&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='http://ss64.com/osx/' title='OS X commands OSX Man Page'&gt;OS X commands OSX Man Page&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='http://www.mac-terminal.com/' title='Mac-Terminal.com'&gt;Mac-Terminal.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
	</entry>
	
	<entry>
		<id>http://fingaholic.github.com/posts/2012-04-25-rakefile.html</id>
		<link type="text/html" rel="alternate" href="http://fingaholic.github.com/posts/2012-04-25-rakefile.html"/>
		<title>ブログ用にRakefile使ってみた</title>
		<updated>2012-04-25T00:00:00+09:00</updated>
		<author>
			<name></name>
			<uri>http://fingaholic.github.com</uri>
		</author>
		<content type="html">&lt;p&gt;&lt;strong&gt;ちなみに&lt;a href='https://github.com/FiNGAHOLiC/fingaholic.github.com/blob/master/Rakefile' title='fingaholic.github.com/Rakefile at master ・ FiNGAHOLiC/fingaholic.github.com'&gt;最新版&lt;/a&gt;は地味にちょこちょこ変えてる&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Rubyが分からんから参考サイトから拝借しながらやってみた。&lt;br /&gt;&lt;del&gt;今のところあんまり楽とは感じない。&lt;/del&gt;&lt;br /&gt;楽だった。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='https://gist.github.com/gists/search?utf8=%E2%9C%93&amp;amp;q=jekyll+rakefile&amp;amp;page=1' title='Gist'&gt;Gist&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='http://css.studiomohawk.com/jekyll/2011/06/11/jekyll/' title='jekyll | CSS Radar'&gt;jekyll | CSS Radar&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='http://d.hatena.ne.jp/unageanu/20100829/1283069269' title='Rakeの基本的な使い方まとめ'&gt;Rakeの基本的な使い方まとめ&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='https://github.com/plusjade/jekyll-bootstrap/blob/master/Rakefile' title='jekyll-bootstrap'&gt;jekyll-bootstrap&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id='jekyll'&gt;jekyllの起動&lt;/h1&gt;

&lt;p&gt;コマンドラインで&lt;code class='inline'&gt;rake preview&lt;/code&gt;するとjekyllが起動する。&lt;code class='inline'&gt;jekyll --auto --server&lt;/code&gt;よりはタイプが減る。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;h1 id='githubpush'&gt;Githubへpush&lt;/h1&gt;

&lt;p&gt;コマンドラインで&lt;code class='inline'&gt;rake release&lt;/code&gt;するとGithubにpush。毎回コミットメッセージ書かなくて済む。&lt;br /&gt;一応新規投稿用なんで他ファイルの修正を施したときは使わないようにしたほうが良いのかな。&lt;br /&gt;エラー処理とかはよく分からんからとりあえず無視してる。&lt;br /&gt;&lt;strong&gt;ちょっと修正した&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;h1 id='id19'&gt;新規投稿用のファイルを作成&lt;/h1&gt;

&lt;p&gt;コマンドラインで&lt;code class='inline'&gt;rake post['記事のタイトル']&lt;/code&gt;でファイルを作成。&lt;br /&gt;同じファイル名があったらエラーが出て終了する。&lt;br /&gt;何ならエディタ開くところまで自動化したかったけど分からんので諦めた。&lt;br /&gt;作成されるとパスを出力するのでvimとかで開いて編集する。&lt;br /&gt;&lt;strong&gt;ちょっと修正した&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;ScoutかCodekit立ちあげてscssからcssにコンバートしてたけどそれすら面倒くさくなってきたのでコマンドから立ち上げるために下記を追記した。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;なんなら.sass-cacheが邪魔だったから消そうとしたけどこれがあることによってパフォーマンスが上がるらしいからどうしよっかな。&lt;/p&gt;

&lt;p&gt;&lt;a href='http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#cache-option' title='SASS_REFERENCE'&gt;SASS_REFERENCE&lt;/a&gt;&lt;/p&gt;</content>
	</entry>
	
	<entry>
		<id>http://fingaholic.github.com/posts/2012-04-24-httpserver.html</id>
		<link type="text/html" rel="alternate" href="http://fingaholic.github.com/posts/2012-04-24-httpserver.html"/>
		<title>ローカルで簡易HTTPサーバー</title>
		<updated>2012-04-24T00:00:00+09:00</updated>
		<author>
			<name></name>
			<uri>http://fingaholic.github.com</uri>
		</author>
		<content type="html">&lt;h1 id='python'&gt;Pythonの場合&lt;/h1&gt;

&lt;p&gt;SimpleHTTPServerが便利そうだけどWindowで使ってみるとなぜか外部ファイル（CSS）読み込まれなかったりでうまくいかなかった。&lt;br /&gt;ちなみにコマンドラインからPython使うには環境変数にPythonのパス（例：C:\Python25）を追加しとく必要がある。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;若しくは下記ファイルをwebserver.pyとかの名前で設置しといて実行するのもあり。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;いずれも&lt;a href='http://localhost:8000/' title='http://localhost:8000/'&gt;http://localhost:8000/&lt;/a&gt;にアクセスすると確認できる。&lt;/p&gt;

&lt;h1 id='ruby'&gt;Rubyの場合&lt;/h1&gt;

&lt;p&gt;こっちはスムーズにいった。&lt;br /&gt;まずはコマンドラインから叩く場合。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;コマンドラインから叩く場合は下記ファイルをwebserver.rbとして保存しておく。&lt;br /&gt;&lt;del&gt;ちなみにDocumentRootはその都度設定しておく。&lt;/del&gt;&lt;br /&gt;カレントディレクトリで起動の場合は不要だった。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;んで、&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;いずれも&lt;a href='http://localhost:8000/' title='http://localhost:8000/'&gt;http://localhost:8000/&lt;/a&gt;にアクセスすると確認できる。&lt;/p&gt;

&lt;p&gt;下記参考サイト。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://www.gesource.jp/weblog/?p=72' title='Rubyで簡易HTTPサーバ | 山本隆の開発日誌'&gt;Rubyで簡易HTTPサーバ | 山本隆の開発日誌&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='http://d.hatena.ne.jp/jyukutyo/20110530/1306844993' title='RubyのワンライナーでWebサーバを起動する - Fight the Future じゅくのblog'&gt;RubyのワンライナーでWebサーバを起動する - Fight the Future じゅくのblog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
	</entry>
	
	<entry>
		<id>http://fingaholic.github.com/posts/2012-04-23-git.html</id>
		<link type="text/html" rel="alternate" href="http://fingaholic.github.com/posts/2012-04-23-git.html"/>
		<title>Git使い始めた</title>
		<updated>2012-04-23T00:00:00+09:00</updated>
		<author>
			<name></name>
			<uri>http://fingaholic.github.com</uri>
		</author>
		<content type="html">&lt;p&gt;※複数人での運用は勉強中。とりあえずローカル運用とかgithubで管理する場合のみ想定。&lt;/p&gt;

&lt;h1 id='git'&gt;まずはGitをインストール&lt;/h1&gt;

&lt;p&gt;一度Windowsにはインストールして使ってたけど暫く使ってなかったので改めてインストールした。&lt;br /&gt;Macの場合はMacPortsとかHomebrewからインストールしたほうが良いかも。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://help.github.com/win-set-up-git/' title='github:help(Win)'&gt;github:help(Win)&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='http://help.github.com/mac-set-up-git/' title='github:help(Mac)'&gt;github:help(Mac)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ちなみに上記だとWindow版は「Use Git Bash only」にチェックしてるけどコマンドプロンプトからも使いたかったので「Run Git from the Windows Command Prompt」にチェックした。その他は解説の通りの設定にした。&lt;br /&gt;ちなみに簡単な英語だけどどうも分からんって場合は「Git インストール」とかでググると色々出てくる。&lt;br /&gt;下記なんてデザインからしてシャレオツ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://rogerdudler.github.com/git-guide/index.ja.html' title='git 簡単ガイド'&gt;git 簡単ガイド&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id='git'&gt;Git概要&lt;/h1&gt;

&lt;p&gt;バージョン管理っていうと他にはSVNとかあるけど、プロジェクト管理ツールのbacklogで使ったことがあるくらいでGitは自分もまだ何となくしか分かってない。&lt;/p&gt;

&lt;h2 id='git'&gt;そもそもGitって？&lt;/h2&gt;

&lt;p&gt;&lt;a href='http://ja.wikipedia.org/wiki/Git' title='Git - Wikipedia'&gt;Git - Wikipedia&lt;/a&gt;にはこうある。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Git（ギット）はプログラムなどのソースコード管理を行う分散型バージョン管理システム。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id='id18'&gt;いやバージョン管理システムって？&lt;/h2&gt;

&lt;p&gt;&lt;a href='http://ja.wikipedia.org/wiki/%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E7%AE%A1%E7%90%86%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0' title='バージョン管理システム - Wikipedia'&gt;バージョン管理システム - Wikipedia&lt;/a&gt;にはこうある。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;バージョン管理システムの最も基本的な機能は、ファイルの作成日時、変更日時、変更点などの履歴を保管することである。これにより、何度も変更を加えたファイルであっても、過去の状態や変更内容を確認したり、変更前の状態を復元することが容易になる。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;まあようはhtmlファイルとかをちまちま「backup0423」とかって名前でバックアップしてたのをGit使うともっとシャレオツに出来ますよって感じらしい（他にも色々あるんだろうけど）。そのかわり苦手な黒い画面を使うことになるのがなかなか手を付けれない理由になってると思う。&lt;/p&gt;

&lt;h1 id='git'&gt;とりあえずGitを使ってみる&lt;/h1&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;とりあえずこれだけでこのディレクトリはバージョン管理できる状態になった。&lt;br /&gt;ちなみに元々リポジトリがある場合は下記のように。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;とりあえずローカルリポジトリが出来たので試しにファイルを編集してみる。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;で、リモートからクローンしてた場合は、&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;リモートからクローンしておらず、これからリモートに登録する場合は、&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;する。これでリモートとローカルが同期された。&lt;/p&gt;

&lt;p&gt;ちなみに肝心のバックアップとかはタグやらブランチってのを使う。&lt;del&gt;多分タグを使ってバージョン管理して、開発用のブランチ作って作業するとかが正解？なんだろうけど&lt;/del&gt;タグがいまいち慣れてないんでとりあえずブランチだけでやってみる。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;こんな感じでdevブランチを作成して作業する。&lt;br /&gt;作業が完了したら適宜addやcommitしておいてmasterとmergeする。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;ちなみに圧縮コミットってのはブランチで何回もadd、commitしてそのままmasterにmergeすると、master側にcommitも適用されるので、ここを一回のcommitにしちゃおうてもの。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;まだこれくらいしか出来てないけどもうちょっと自由にインデックスとか作業ツリー、HEADを操作出来るようになりたい。しかも今は1人で管理してるだけだけど複数人とかってなるともっとややこしいと思うし。&lt;/p&gt;

&lt;p&gt;下記参考リンク。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://progit.org/book/ja/' title='Pro Git'&gt;Pro Git&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='http://hyuki.com/techinfo/gitinit.html' title='Gitの基礎練習'&gt;Gitの基礎練習&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='http://dev.classmethod.jp/tag/git/' title='Classmethod.dev() | Git'&gt;Classmethod.dev() | Git&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='http://d.hatena.ne.jp/os0x/20120220/1329750795' title='git初心者向けのTipsなど - 0xFF'&gt;git初心者向けのTipsなど - 0xFF&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='http://kray.jp/blog/review-git-commands/' title='はじめてgitをつかったのでコマンドを復習します | KRAY Inc'&gt;はじめてgitをつかったのでコマンドを復習します | KRAY Inc&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='http://gitcasts.com/' title='GitCasts : Git Screencasts'&gt;GitCasts : Git Screencasts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
	</entry>
	
	<entry>
		<id>http://fingaholic.github.com/posts/2012-04-20-vim.html</id>
		<link type="text/html" rel="alternate" href="http://fingaholic.github.com/posts/2012-04-20-vim.html"/>
		<title>Vimを再インストールした</title>
		<updated>2012-04-20T00:00:00+09:00</updated>
		<author>
			<name></name>
			<uri>http://fingaholic.github.com</uri>
		</author>
		<content type="html">&lt;h1 id='vim'&gt;Vimのダウンロード&lt;/h1&gt;

&lt;p&gt;とりあえず下記から32bit版をダウンロード。展開されたディレクトリをProgram Filesにvimとリネームして格納。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://www.kaoriya.net/software/vim' title='KaoriYa'&gt;KaoriYa&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id='vundle'&gt;Vundleのインストール&lt;/h1&gt;

&lt;p&gt;今まではそのままpluginフォルダとかにぶっこんでたけどこれをいい機会にプラグイン管理をシャレオツにしてくれるVundleをインストール。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='https://github.com/gmarik/Vundle' title='Vundle'&gt;Vundle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下記を参考にしながらだとスムーズにいった。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='https://github.com/gmarik/vundle/wiki/Vundle-for-Windows' title='Vundle for Windows'&gt;Vundle for Windows&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='http://www.kaneshinth.com/vim/windows-vim-plugin-vundle-2/' title='WindowsにてVim PluginをVundleで管理する(Part 2)'&gt;WindowsにてVim PluginをVundleで管理する(Part 2)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;なおインストール後にはvimrcに下記を設定しておく。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;h1 id='vundle'&gt;Vundleの使用方法&lt;/h1&gt;

&lt;p&gt;肝心の使用方法はvimrcにインストールしたいプラグインのリポジトリ場所に応じて記述する。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;vim-scriptsリポジトリの場合は&lt;code class='inline'&gt;Bundle 'hoge.vim'&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;githubリポジトリの場合は&lt;code class='inline'&gt;Bundle 'user-name/repository-name'&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;github以外のリポジトリの場合は&lt;code class='inline'&gt;Bundle 'git://git.hoge.com/hoge.git'&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;記述後にvimを再起動させて&lt;code class='inline'&gt;:BundleInstall&lt;/code&gt;とコマンドを打つとプラグインのインストール出来る。&lt;br /&gt;ちなみに&lt;code class='inline'&gt;:BundleSearch&lt;/code&gt;でプラグイン検索もvim上で出来たりするけどインストールがうまくいかないのでこの辺りはvimrcに記述して&lt;code class='inline'&gt;:BundleInstall&lt;/code&gt;でいいと思う。&lt;br /&gt;とりあえずプラグインは下記からめぼしいのを探してインストールした。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://matome.naver.jp/odai/2130348974487179401' title='HTML+CSS編集に便利なVimプラグイン'&gt;HTML+CSS編集に便利なVimプラグイン&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id='gvimrcvimrc'&gt;gvimrcとvimrcの設定&lt;/h1&gt;

&lt;p&gt;Vundleの話ばっかだけどその他のgvimrcとvimrcは下記のように設定。&lt;/p&gt;

&lt;h2 id='gvimrc'&gt;gvimrc&lt;/h2&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;h2 id='vimrc'&gt;vimrc&lt;/h2&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;後々はdotfilesをgithubとかで管理すれば環境に依存せず同じ設定でvim使えるらしいのでやりたい。&lt;/p&gt;</content>
	</entry>
	
	<entry>
		<id>http://fingaholic.github.com/posts/2012-04-20-markdown.html</id>
		<link type="text/html" rel="alternate" href="http://fingaholic.github.com/posts/2012-04-20-markdown.html"/>
		<title>Markdown Sample</title>
		<updated>2012-04-20T00:00:00+09:00</updated>
		<author>
			<name></name>
			<uri>http://fingaholic.github.com</uri>
		</author>
		<content type="html">&lt;h1 id='id3'&gt;パラグラフ&lt;/h1&gt;

&lt;h2 id='id4'&gt;通常版&lt;/h2&gt;

&lt;p&gt;パラグラフパラグラフパラグラフパラグラフパラグラフパラグラフパラグラフパラグラフパラグラフパラグラフパラグラフパラグラフパラグラフパラグラフパラグラフパラグラフパラグラフパラグラフパラグラフパラグラフパラグラフパラグラフパラグラフパラグラフパラグラフパラグラフパラグラフパラグラフパラグラフパラグラフパラグラフパラグラフパラグラフパラグラフパラグラフパラグラフパラグラフパラグラフパラグラフパラグラフパラグラフパラグラフ&lt;/p&gt;

&lt;h2 id='id5'&gt;改行&lt;/h2&gt;

&lt;p&gt;パラグラフパラグラフパラグラフパラグラフ&lt;br /&gt;パラグラフパラグラフパラグラフパラグラフ&lt;br /&gt;パラグラフパラグラフパラグラフパラグラフ&lt;br /&gt;パラグラフパラグラフパラグラフパラグラフ&lt;/p&gt;
&lt;hr /&gt;
&lt;h1 id='id6'&gt;リスト&lt;/h1&gt;

&lt;h2 id='id7'&gt;順序のないリスト&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;hoge&lt;/li&gt;

&lt;li&gt;hoge&lt;/li&gt;

&lt;li&gt;hoge&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='id8'&gt;順序ありリスト&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;リスト1&lt;/li&gt;

&lt;li&gt;リスト2&lt;/li&gt;

&lt;li&gt;リスト3&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;h1 id='id9'&gt;定義リスト&lt;/h1&gt;

&lt;dl&gt;
&lt;dt&gt;Dog&lt;/dt&gt;

&lt;dd&gt;Animal&lt;/dd&gt;

&lt;dt&gt;Carot&lt;/dt&gt;

&lt;dd&gt;Vegetable&lt;/dd&gt;
&lt;/dl&gt;
&lt;hr /&gt;
&lt;h1 id='id10'&gt;強調&lt;/h1&gt;

&lt;h2 id='id11'&gt;イタリック&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;ほええええええええええええええ&lt;/em&gt;&lt;br /&gt;&lt;em&gt;ほええええええええええええええ&lt;/em&gt;&lt;/p&gt;

&lt;h2 id='id12'&gt;ボールド&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;ぎゃああああああああああああああ&lt;/strong&gt;&lt;br /&gt;&lt;strong&gt;ぎゃああああああああああああああ&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h1 id='id13'&gt;リンク&lt;/h1&gt;

&lt;h2 id='1'&gt;方法1&lt;/h2&gt;

&lt;p&gt;&lt;a href='/' title='リンクタイトル'&gt;リンク&lt;/a&gt;&lt;/p&gt;

&lt;h2 id='2'&gt;方法2&lt;/h2&gt;

&lt;p&gt;&lt;a href='/' title='リンクタイトル'&gt;リンク&lt;/a&gt;&lt;/p&gt;

&lt;h2 id='3'&gt;方法3&lt;/h2&gt;

&lt;p&gt;&lt;a href='http://google.co.jp/'&gt;http://google.co.jp/&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h1 id='id14'&gt;コード挿入&lt;/h1&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;
&lt;hr /&gt;
&lt;h1 id='id15'&gt;引用&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;引用文引用文引用文引用文引用文引用文 引用文引用文引用文引用文引用文引用文 引用文引用文引用文引用文引用文引用文 引用文引用文引用文引用文引用文引用文 引用文引用文引用文引用文引用文引用文 引用文引用文引用文引用文引用文引用文 引用文引用文引用文引用文引用文引用文&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h1 id='id16'&gt;テーブル&lt;/h1&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;header&lt;/th&gt;&lt;th&gt;header&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style='text-align: left;'&gt;hogehoge&lt;/td&gt;&lt;td style='text-align: left;'&gt;hogehoge&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td style='text-align: left;'&gt;hogehoge&lt;/td&gt;&lt;td style='text-align: left;'&gt;hogehoge&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td style='text-align: left;'&gt;hogehoge&lt;/td&gt;&lt;td style='text-align: left;'&gt;hogehoge&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td style='text-align: left;'&gt;hogehoge&lt;/td&gt;&lt;td style='text-align: left;'&gt;hogehoge&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td style='text-align: left;'&gt;hogehoge&lt;/td&gt;&lt;td style='text-align: left;'&gt;hogehoge&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td style='text-align: left;'&gt;hogehoge&lt;/td&gt;&lt;td style='text-align: left;'&gt;hogehoge&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td style='text-align: left;'&gt;hogehoge&lt;/td&gt;&lt;td style='text-align: left;'&gt;hogehoge&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;※iphoneを考慮するとセルの数はあまり増やさないほうが吉&lt;/p&gt;
&lt;hr /&gt;
&lt;h1 id='id17'&gt;画像&lt;/h1&gt;

&lt;p&gt;&lt;img alt='alt' src='http://placekitten.com/500/300' /&gt;&lt;/p&gt;</content>
	</entry>
	
	<entry>
		<id>http://fingaholic.github.com/posts/2012-04-20-ghpages.html</id>
		<link type="text/html" rel="alternate" href="http://fingaholic.github.com/posts/2012-04-20-ghpages.html"/>
		<title>Githubでgh-pagesを作成する</title>
		<updated>2012-04-20T00:00:00+09:00</updated>
		<author>
			<name></name>
			<uri>http://fingaholic.github.com</uri>
		</author>
		<content type="html">&lt;p&gt;ちなみにプロジェクトのコードとPRページを同一のファイルで管理するのが前提条件。&lt;br /&gt;ここが参考になった。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://tokkono.cute.coocan.jp/blog/slow/index.php/programming/github-pages-workflow/' title='実践GitHub Pages運用のユースケースとワークフローの詳細'&gt;実践GitHub Pages運用のユースケースとワークフローの詳細&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id='id1'&gt;今までやってた方法&lt;/h1&gt;

&lt;p&gt;リポジトリ作ったらmaster派生のブランチ、gh-pagesを作っておく。&lt;br /&gt;&lt;strong&gt;普段はgh-pagesブランチで作業し&lt;/strong&gt;て更新の度にmasterにgh-pagesをmergeしてpush。&lt;br /&gt;初心者の自分から見てもキモいやり方だと思う。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;そもそもgh-pagesで作業してからmasterに反映とかなんか違う。&lt;br /&gt;developとかなら分からんでもないけど。&lt;/p&gt;

&lt;h1 id='rebase'&gt;rebaseを使う&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;普段はmasterで作業&lt;/strong&gt;してgh-pagesに修正を反映してpush。&lt;br /&gt;うん、さっきよりはいい。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;ただ毎回切り替えてrebase、pushするのがメンドイ。&lt;/p&gt;

&lt;h1 id='id2'&gt;上記の一部ワークフローを自動化&lt;/h1&gt;

&lt;p&gt;Paul Irish様の提案らしい。&lt;br /&gt;まずは下記参考サイトを元に.git/hooks/post-commitにファイルを設置。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://get.inject.io/n/XxsZ6RE7' title='Git post-commit hook to keep master and gh-pages branch in sync'&gt;Git post-commit hook to keep master and gh-pages branch in sync&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;するとさっきまでの煩わしいコマンドが下記のように。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ってgh-pagesが更新されてねー！！！！！！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;ということで現在も調査中。&lt;/del&gt;&lt;/p&gt;&lt;p&gt;&lt;del&gt;Windows環境ではcommit後にちゃんと実行されてた。&lt;br /&gt;なぜMacだとダメなんだろうか。&lt;br /&gt;環境変数辺りだろうか。&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;結果から言うとpost-commitパーミッションが755になっていなかったのが原因だった。&lt;br /&gt;まずはpost-commitのパーミッションを確認してみる。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;このrw-r&amp;#8211;r&amp;#8211;ってのが644ってのがあたるので読み書きは可能だけど実行出来ない。&lt;br /&gt;実行可能にするためにsudoでパーミッションを実行可能な755に変更してやる。&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;これで無事完成！&lt;/p&gt;</content>
	</entry>
	

</feed>
